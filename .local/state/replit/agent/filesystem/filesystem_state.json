{"file_contents":{"README.md":{"content":"# 4Paws - Animal Shelter Management System\n\nA production-ready, multi-tenant web application for U.S. animal shelters and foster-based rescues. Built with modern web technologies for speed, reliability, and ease of use.\n\n## Features\n\n### Core Functionality\n- **Multi-tenant Architecture**: Secure, organization-based data isolation with role-based access control (admin, staff, volunteer, foster, readonly)\n- **Animal Management**: Complete intake-to-outcome workflow with photo upload, batch intake for litters, microchip tracking, and status management\n- **Medical Scheduling**: Automated vaccine/treatment schedules with batch actions, due date tracking, and overdue alerts\n- **Adoption Pipeline**: Kanban-style application workflow with Stripe payment integration for fees and donations\n- **Foster Management**: Availability tracking, animal assignment/transfer, and self-service portal for updates\n- **Volunteer Portal**: Simple activity logging (walked/fed/play), behavior notes, and QR code support\n- **Reporting & Analytics**: Canned reports (intake/outcomes, LOS, compliance) and custom query builder with CSV export\n- **External Integrations**: Petfinder/Adopt-a-Pet XML feeds, Stripe donations, microchip registration stubs\n\n### Technical Highlights\n- **Stack**: React + TypeScript, Express.js, PostgreSQL, Drizzle ORM, TanStack Query\n- **UI**: Tailwind CSS + shadcn/ui components with orange/yellow/white brand theme\n- **Authentication**: Session-based auth with bcrypt password hashing\n- **Database**: Normalized PostgreSQL schema with 20+ tables, JSONB for extensible fields\n- **API**: RESTful endpoints under `/api/v1` with Zod validation\n- **Storage**: S3-compatible for photos (configurable, local dev fallback)\n\n## Quick Start\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database\n- pnpm (recommended) or npm\n\n### Installation\n\n1. **Clone and install dependencies**\n   ```bash\n   git clone <repository-url>\n   cd 4paws\n   pnpm install\n   ```\n\n2. **Set up environment variables**\n   ```bash\n   # Required\n   DATABASE_URL=postgresql://user:password@localhost:5432/4paws\n   SESSION_SECRET=your-secret-key-here\n   \n   # Optional - Stripe for payments\n   STRIPE_SECRET_KEY=sk_test_...\n   VITE_STRIPE_PUBLIC_KEY=pk_test_...\n   ","size_bytes":2241},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        success: {\n          DEFAULT: \"hsl(var(--success))\",\n          foreground: \"hsl(var(--success-foreground))\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning))\",\n          foreground: \"hsl(var(--warning-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2415},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/auth.ts":{"content":"import { storage } from \"./storage\";\nimport { type User } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 10);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport async function authenticateUser(email: string, password: string): Promise<User | null> {\n  const user = await storage.getUserByEmail(email);\n  if (!user) return null;\n  \n  const valid = await verifyPassword(password, user.password);\n  if (!valid) return null;\n  \n  return user;\n}\n\nexport function getUserFromSession(session: any): User | null {\n  return session?.user || null;\n}\n","size_bytes":743},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { authenticateUser, hashPassword } from \"./auth\";\nimport { insertAnimalSchema, insertPersonSchema, insertMedicalScheduleSchema, insertApplicationSchema, insertAdoptionSchema, insertNoteSchema, insertPhotoSchema, outcomes, animals, adoptions as adoptionsTable, medicalSchedule, people } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport Stripe from \"stripe\";\nimport { z } from \"zod\";\n\n// Session middleware\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    organizationId?: string;\n  }\n}\n\nconst stripe = process.env.STRIPE_SECRET_KEY ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-09-30.clover\",\n}) : null;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'dev-secret-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    }\n  }));\n\n  // Auth middleware\n  const requireAuth = (req: Request, res: Response, next: Function) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    next();\n  };\n\n  const requireOrg = (req: Request, res: Response, next: Function) => {\n    if (!req.session.organizationId) {\n      return res.status(403).json({ message: \"No organization selected\" });\n    }\n    next();\n  };\n\n  // Auth routes\n  app.post(\"/api/v1/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      const user = await authenticateUser(email, password);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Get user's first organization\n      const memberships = await storage.getUserMemberships(user.id);\n      if (memberships.length === 0) {\n        return res.status(403).json({ message: \"No organization access\" });\n      }\n\n      req.session.userId = user.id;\n      req.session.organizationId = memberships[0].organizationId;\n\n      res.json({ \n        user: { \n          id: user.id, \n          name: user.name, \n          email: user.email \n        },\n        organization: memberships[0].organization,\n        role: memberships[0].role,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/v1/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out\" });\n    });\n  });\n\n  app.get(\"/api/v1/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId!);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const memberships = await storage.getUserMemberships(user.id);\n      const currentMembership = memberships.find(m => m.organizationId === req.session.organizationId);\n\n      res.json({\n        user: { id: user.id, name: user.name, email: user.email },\n        organization: currentMembership?.organization,\n        role: currentMembership?.role,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Animals routes\n  app.get(\"/api/v1/animals\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const animals = await storage.getAnimals(req.session.organizationId!);\n      res.json(animals);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/v1/animals/:id\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const animal = await storage.getAnimal(req.params.id, req.session.organizationId!);\n      if (!animal) {\n        return res.status(404).json({ message: \"Animal not found\" });\n      }\n      res.json(animal);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/v1/animals\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const data = insertAnimalSchema.parse({ ...req.body, organizationId: req.session.organizationId });\n      const animal = await storage.createAnimal(data);\n      res.json(animal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/v1/animals/:id\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const animal = await storage.updateAnimal(req.params.id, req.session.organizationId!, req.body);\n      res.json(animal);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Medical routes\n  app.get(\"/api/v1/medical/schedule\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const tasks = await storage.getMedicalTasks(req.session.organizationId!);\n      res.json(tasks);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/v1/medical/schedule\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const data = insertMedicalScheduleSchema.parse(req.body);\n      const task = await storage.createMedicalTask(data);\n      res.json(task);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/v1/medical/schedule/:id\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const task = await storage.updateMedicalTask(req.params.id, req.body);\n      res.json(task);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/v1/medical/schedule/batch\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const batchUpdateSchema = z.object({\n        taskIds: z.array(z.string()).min(1),\n        updates: z.object({\n          status: z.enum(['scheduled', 'done', 'missed']),\n        }),\n      });\n\n      const { taskIds, updates } = batchUpdateSchema.parse(req.body);\n      \n      const orgId = req.session.organizationId!;\n      const allTasks = await storage.getMedicalTasks(orgId);\n      const validTaskIds = allTasks.map(t => t.id);\n      \n      const tasksToUpdate = taskIds.filter(id => validTaskIds.includes(id));\n      if (tasksToUpdate.length === 0) {\n        return res.status(404).json({ message: \"No valid tasks found in your organization\" });\n      }\n      \n      const results = await Promise.all(\n        tasksToUpdate.map(id => storage.updateMedicalTask(id, updates))\n      );\n      res.json({ updated: results.length, tasks: results });\n    } catch (error: any) {\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid request format\", errors: error.errors });\n      }\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // People routes\n  app.get(\"/api/v1/people\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const people = await storage.getPeople(req.session.organizationId!);\n      res.json(people);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/v1/people\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const data = insertPersonSchema.parse({ ...req.body, organizationId: req.session.organizationId });\n      const person = await storage.createPerson(data);\n      res.json(person);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Note routes\n  app.get(\"/api/v1/notes/:subjectType/:subjectId\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const { subjectType, subjectId } = req.params;\n      \n      if (subjectType === 'animal') {\n        const animal = await storage.getAnimal(subjectId, req.session.organizationId!);\n        if (!animal) {\n          return res.status(404).json({ message: \"Animal not found in your organization\" });\n        }\n      }\n      \n      const notesList = await storage.getNotes(subjectType, subjectId);\n      res.json(notesList);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/v1/notes\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const data = insertNoteSchema.parse({ ...req.body, authorId: req.session.userId });\n      \n      if (data.subjectType === 'animal') {\n        const animal = await storage.getAnimal(data.subjectId, req.session.organizationId!);\n        if (!animal) {\n          return res.status(404).json({ message: \"Animal not found in your organization\" });\n        }\n      }\n      \n      const note = await storage.createNote(data);\n      res.json(note);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Photo routes\n  app.get(\"/api/v1/photos/:subjectType/:subjectId\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const { subjectType, subjectId } = req.params;\n      \n      if (subjectType === 'animal') {\n        const animal = await storage.getAnimal(subjectId, req.session.organizationId!);\n        if (!animal) {\n          return res.status(404).json({ message: \"Animal not found in your organization\" });\n        }\n      }\n      \n      const photosList = await storage.getPhotos(subjectType, subjectId);\n      res.json(photosList);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/v1/photos\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const data = insertPhotoSchema.parse({ ...req.body, authorId: req.session.userId });\n      \n      if (data.subjectType === 'animal') {\n        const animal = await storage.getAnimal(data.subjectId, req.session.organizationId!);\n        if (!animal) {\n          return res.status(404).json({ message: \"Animal not found in your organization\" });\n        }\n      }\n      \n      const photo = await storage.createPhoto(data);\n      res.json(photo);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Applications routes\n  app.get(\"/api/v1/applications\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const applications = await storage.getApplications(req.session.organizationId!);\n      res.json(applications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/v1/applications\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const data = insertApplicationSchema.parse(req.body);\n      const application = await storage.createApplication(data);\n      res.json(application);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch(\"/api/v1/applications/:id\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const application = await storage.updateApplication(req.params.id, req.body);\n      res.json(application);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Adoption checkout with Stripe\n  app.post(\"/api/v1/adoptions/checkout\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(500).json({ message: \"Stripe not configured\" });\n      }\n\n      const { animalId, adopterId, feeCents, donationCents } = req.body;\n      const totalCents = (feeCents || 0) + (donationCents || 0);\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: totalCents,\n        currency: \"usd\",\n        metadata: {\n          animalId,\n          adopterId,\n          feeCents: String(feeCents),\n          donationCents: String(donationCents),\n        }\n      });\n\n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/v1/adoptions\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const data = insertAdoptionSchema.parse(req.body);\n      const adoption = await storage.createAdoption(data);\n      \n      // Update animal status to adopted\n      await storage.updateAnimal(data.animalId, req.session.organizationId!, { status: 'adopted' });\n      \n      res.json(adoption);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Reports metrics\n  app.get(\"/api/v1/reports/metrics\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const organizationId = req.session.organizationId!;\n      \n      // Get outcomes with animal data for calculations\n      const outcomesData = await db.select()\n        .from(outcomes)\n        .innerJoin(animals, eq(outcomes.animalId, animals.id))\n        .where(eq(animals.organizationId, organizationId));\n      \n      // Get adoptions for this month calculation\n      const adoptionsData = await db.select()\n        .from(adoptionsTable)\n        .innerJoin(animals, eq(adoptionsTable.animalId, animals.id))\n        .where(eq(animals.organizationId, organizationId));\n      \n      // Get medical tasks for compliance calculation\n      const medicalTasksData = await db.select()\n        .from(medicalSchedule)\n        .innerJoin(animals, eq(medicalSchedule.animalId, animals.id))\n        .where(eq(animals.organizationId, organizationId));\n      \n      // Calculate Live Release Rate (positive outcomes / total outcomes * 100)\n      const positiveOutcomes = outcomesData.filter((o: any) => \n        ['adoption', 'transfer_out', 'return_to_owner'].includes(o.outcomes.type)\n      ).length;\n      const liveReleaseRate = outcomesData.length > 0 \n        ? ((positiveOutcomes / outcomesData.length) * 100).toFixed(1)\n        : \"0.0\";\n      \n      // Calculate Average Length of Stay\n      const outcomesWithDates = outcomesData.filter((o: any) => o.animals.intakeDate && o.outcomes.date);\n      const totalDays = outcomesWithDates.reduce((sum: number, o: any) => {\n        const intake = new Date(o.animals.intakeDate);\n        const outcome = new Date(o.outcomes.date);\n        const days = Math.floor((outcome.getTime() - intake.getTime()) / (1000 * 60 * 60 * 24));\n        return sum + days;\n      }, 0);\n      const avgLOS = outcomesWithDates.length > 0 \n        ? Math.round(totalDays / outcomesWithDates.length)\n        : 0;\n      \n      // Calculate Total Adoptions this month\n      const now = new Date();\n      const thisMonth = adoptionsData.filter((a: any) => {\n        const adoptionDate = new Date(a.adoptions.date);\n        return adoptionDate.getMonth() === now.getMonth() && \n               adoptionDate.getFullYear() === now.getFullYear();\n      }).length;\n      \n      // Calculate Medical Compliance (simplified - all done tasks counted as on time)\n      const doneTasks = medicalTasksData.filter((t: any) => t.medicalSchedule.status === 'done');\n      const totalTasks = medicalTasksData.length;\n      const medicalCompliance = totalTasks > 0 \n        ? ((doneTasks.length / totalTasks) * 100).toFixed(1)\n        : \"100.0\";\n      \n      res.json({\n        liveReleaseRate: `${liveReleaseRate}%`,\n        avgLengthOfStay: `${avgLOS} days`,\n        totalAdoptionsThisMonth: thisMonth,\n        medicalCompliance: `${medicalCompliance}%`,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // CSV Export\n  app.get(\"/api/v1/reports/export/csv\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const { entity } = req.query;\n      const organizationId = req.session.organizationId!;\n      \n      let csvData = '';\n      let filename = 'export.csv';\n      \n      if (entity === 'animals') {\n        const animals = await storage.getAnimals(organizationId);\n        filename = `animals_${new Date().toISOString().split('T')[0]}.csv`;\n        csvData = 'ID,Name,Species,Breed,Sex,Status,Intake Date,Location\\n';\n        animals.forEach(animal => {\n          const intakeDate = animal.intakeDate ? new Date(animal.intakeDate).toLocaleDateString() : '';\n          csvData += `\"${animal.id}\",\"${animal.name}\",\"${animal.species}\",\"${animal.breed || ''}\",\"${animal.sex || ''}\",\"${animal.status}\",\"${intakeDate}\",\"${animal.locationId || ''}\"\\n`;\n        });\n      } else if (entity === 'people') {\n        const people = await storage.getPeople(organizationId);\n        filename = `people_${new Date().toISOString().split('T')[0]}.csv`;\n        csvData = 'ID,Name,Type,Email,Phone,Address\\n';\n        people.forEach(person => {\n          csvData += `\"${person.id}\",\"${person.name}\",\"${person.type}\",\"${person.email || ''}\",\"${person.phone || ''}\",\"${person.address || ''}\"\\n`;\n        });\n      } else if (entity === 'adoptions') {\n        const adoptionsData = await db.select()\n          .from(adoptionsTable)\n          .innerJoin(animals, eq(adoptionsTable.animalId, animals.id))\n          .innerJoin(people, eq(adoptionsTable.adopterId, people.id))\n          .where(eq(animals.organizationId, organizationId));\n        \n        filename = `adoptions_${new Date().toISOString().split('T')[0]}.csv`;\n        csvData = 'Adoption ID,Animal Name,Adopter Name,Date,Fee,Donation\\n';\n        adoptionsData.forEach((row: any) => {\n          const date = new Date(row.adoptions.date).toLocaleDateString();\n          const fee = (row.adoptions.feeCents / 100).toFixed(2);\n          const donation = row.adoptions.donationCents ? (row.adoptions.donationCents / 100).toFixed(2) : '0.00';\n          csvData += `\"${row.adoptions.id}\",\"${row.animals.name}\",\"${row.people.name}\",\"${date}\",\"$${fee}\",\"$${donation}\"\\n`;\n        });\n      } else if (entity === 'medical') {\n        const medicalTasksData = await db.select()\n          .from(medicalSchedule)\n          .innerJoin(animals, eq(medicalSchedule.animalId, animals.id))\n          .where(eq(animals.organizationId, organizationId));\n        \n        filename = `medical_${new Date().toISOString().split('T')[0]}.csv`;\n        csvData = 'Task ID,Animal Name,Type,Due Date,Status,Notes\\n';\n        medicalTasksData.forEach((row: any) => {\n          const dueDate = new Date(row.medicalSchedule.dueDate).toLocaleDateString();\n          csvData += `\"${row.medicalSchedule.id}\",\"${row.animals.name}\",\"${row.medicalSchedule.type}\",\"${dueDate}\",\"${row.medicalSchedule.status}\",\"${row.medicalSchedule.notes || ''}\"\\n`;\n        });\n      } else {\n        return res.status(400).json({ message: \"Invalid entity type\" });\n      }\n      \n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.send(csvData);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Feeds for external integrations\n  app.get(\"/api/v1/feeds/petfinder.xml\", requireAuth, requireOrg, async (req, res) => {\n    try {\n      const animals = await storage.getAnimals(req.session.organizationId!);\n      const availableAnimals = animals.filter(a => a.status === 'available');\n      \n      // Helper function to calculate age from DOB\n      const calculateAge = (dob: Date | string | null): string => {\n        if (!dob) return 'Unknown';\n        const dobDate = typeof dob === 'string' ? new Date(dob) : dob;\n        \n        // Check for Invalid Date\n        if (Number.isNaN(dobDate.getTime())) return 'Unknown';\n        \n        const now = new Date();\n        const years = Math.floor((now.getTime() - dobDate.getTime()) / (365.25 * 24 * 60 * 60 * 1000));\n        const months = Math.floor((now.getTime() - dobDate.getTime()) / (30.44 * 24 * 60 * 60 * 1000));\n        \n        if (years > 0) return `${years} year${years > 1 ? 's' : ''}`;\n        if (months > 0) return `${months} month${months > 1 ? 's' : ''}`;\n        return 'Less than 1 month';\n      };\n      \n      // Helper function to escape XML special characters\n      const escapeXml = (str: string | null | undefined): string => {\n        if (!str) return '';\n        return str\n          .replace(/&/g, '&amp;')\n          .replace(/</g, '&lt;')\n          .replace(/>/g, '&gt;')\n          .replace(/\"/g, '&quot;')\n          .replace(/'/g, '&apos;');\n      };\n      \n      // Generate enhanced XML feed structure\n      let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<pets>\\n';\n      availableAnimals.forEach(animal => {\n        xml += `  <pet>\\n`;\n        xml += `    <id>${escapeXml(animal.id)}</id>\\n`;\n        xml += `    <name>${escapeXml(animal.name)}</name>\\n`;\n        xml += `    <species>${escapeXml(animal.species)}</species>\\n`;\n        xml += `    <breed>${escapeXml(animal.breed) || 'Unknown'}</breed>\\n`;\n        xml += `    <sex>${escapeXml(animal.sex) || 'Unknown'}</sex>\\n`;\n        xml += `    <age>${calculateAge(animal.dobEst)}</age>\\n`;\n        xml += `    <color>${escapeXml(animal.color) || 'Unknown'}</color>\\n`;\n        \n        if (animal.description) {\n          xml += `    <description><![CDATA[${animal.description}]]></description>\\n`;\n        }\n        \n        if (animal.microchip) {\n          xml += `    <microchip>${escapeXml(animal.microchip)}</microchip>\\n`;\n        }\n        \n        if (animal.locationId) {\n          xml += `    <location>${escapeXml(animal.locationId)}</location>\\n`;\n        }\n        \n        if (animal.photos && animal.photos.length > 0) {\n          xml += `    <photos>\\n`;\n          animal.photos.forEach(photo => {\n            // Safely extract URL whether photo is a string or object\n            const photoUrl = typeof photo === 'string' ? photo : (photo as any).url || String(photo);\n            if (photoUrl && photoUrl !== '[object Object]') {\n              xml += `      <photo>${escapeXml(photoUrl)}</photo>\\n`;\n            }\n          });\n          xml += `    </photos>\\n`;\n        }\n        \n        xml += `  </pet>\\n`;\n      });\n      xml += '</pets>';\n      \n      res.set('Content-Type', 'application/xml');\n      res.send(xml);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Health check\n  app.get(\"/api/healthz\", (req, res) => {\n    res.json({ status: \"ok\" });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":22389},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { organizations, users, memberships, animals, people, medicalSchedule, applications, locations, fosterAssignments } from \"@shared/schema\";\nimport { hashPassword } from \"./auth\";\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  // Create demo organization\n  const [org] = await db.insert(organizations).values({\n    name: \"4Paws Demo Shelter\",\n    address: \"123 Shelter Lane, Pet City, PC 12345\",\n    settings: { allowPublicAdoptions: true }\n  }).returning();\n\n  console.log(\"Created organization:\", org.name);\n\n  // Create main location\n  const [mainLocation] = await db.insert(locations).values({\n    organizationId: org.id,\n    name: \"Main Shelter\",\n    type: \"shelter\"\n  }).returning();\n\n  // Create users with different roles\n  const hashedPassword = await hashPassword(\"demo-only\");\n  \n  const [adminUser] = await db.insert(users).values({\n    name: \"Staff Admin\",\n    email: \"staff@demo.4paws.org\",\n    password: hashedPassword,\n  }).returning();\n\n  const [fosterUser] = await db.insert(users).values({\n    name: \"Foster User\",\n    email: \"foster@demo.4paws.org\",\n    password: hashedPassword,\n  }).returning();\n\n  const [volunteerUser] = await db.insert(users).values({\n    name: \"Volunteer User\",\n    email: \"volunteer@demo.4paws.org\",\n    password: hashedPassword,\n  }).returning();\n\n  // Create memberships\n  await db.insert(memberships).values([\n    { userId: adminUser.id, organizationId: org.id, role: 'admin' },\n    { userId: fosterUser.id, organizationId: org.id, role: 'foster' },\n    { userId: volunteerUser.id, organizationId: org.id, role: 'volunteer' },\n  ]);\n\n  console.log(\"Created users and memberships\");\n\n  // Create 50 animals\n  const animalNames = [\n    \"Buddy\", \"Luna\", \"Max\", \"Bella\", \"Charlie\", \"Lucy\", \"Cooper\", \"Daisy\",\n    \"Rocky\", \"Molly\", \"Bear\", \"Sadie\", \"Duke\", \"Sophie\", \"Zeus\", \"Chloe\",\n    \"Oliver\", \"Lily\", \"Jack\", \"Zoe\", \"Milo\", \"Penny\", \"Leo\", \"Rosie\",\n    \"Teddy\", \"Ruby\", \"Tucker\", \"Maggie\", \"Bentley\", \"Stella\", \"Toby\", \"Nala\",\n    \"Finn\", \"Coco\", \"Winston\", \"Pepper\", \"Jasper\", \"Princess\", \"Oscar\", \"Abby\",\n    \"Rex\", \"Emma\", \"Simba\", \"Angel\", \"Murphy\", \"Gracie\", \"Gus\", \"Harley\", \"Shadow\", \"Misty\"\n  ];\n\n  const breeds = {\n    dog: [\"Labrador Mix\", \"German Shepherd\", \"Beagle\", \"Bulldog\", \"Golden Retriever\", \"Husky Mix\", \"Terrier Mix\"],\n    cat: [\"Domestic Shorthair\", \"Tabby\", \"Siamese Mix\", \"Persian\", \"Calico\", \"Tuxedo\"]\n  };\n\n  for (let i = 0; i < 50; i++) {\n    const species = i % 2 === 0 ? 'dog' : 'cat';\n    const breedList = breeds[species];\n    const statusOptions: ('available' | 'fostered' | 'hold')[] = ['available', 'fostered', 'hold'];\n    \n    await db.insert(animals).values({\n      organizationId: org.id,\n      name: animalNames[i],\n      species: species as 'dog' | 'cat',\n      breed: breedList[Math.floor(Math.random() * breedList.length)],\n      sex: Math.random() > 0.5 ? 'Male' : 'Female',\n      color: ['Brown', 'Black', 'White', 'Orange', 'Gray', 'Mixed'][Math.floor(Math.random() * 6)],\n      dobEst: new Date(Date.now() - Math.random() * 365 * 5 * 24 * 60 * 60 * 1000),\n      intakeDate: new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000),\n      status: statusOptions[Math.floor(Math.random() * 3)],\n      locationId: mainLocation.id,\n      description: `Friendly and playful ${species}. Great with families!`,\n    });\n  }\n\n  console.log(\"Created 50 animals\");\n\n  // Get all animals for medical tasks, applications, and foster assignments\n  const someAnimals = await db.select().from(animals).limit(50);\n\n  // Create medical tasks - some due today, some overdue\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  \n  for (let i = 0; i < 10; i++) {\n    const medicalTypes: ('vaccine' | 'treatment' | 'exam')[] = ['vaccine', 'treatment', 'exam'];\n    await db.insert(medicalSchedule).values({\n      animalId: someAnimals[i].id,\n      type: medicalTypes[Math.floor(Math.random() * 3)],\n      dueDate: today,\n      status: 'scheduled',\n      notes: 'Regular checkup required'\n    });\n  }\n\n  // Create overdue tasks\n  const yesterday = new Date(today);\n  yesterday.setDate(yesterday.getDate() - 1);\n  \n  for (let i = 10; i < 16; i++) {\n    const overdueTypes: ('vaccine' | 'treatment')[] = ['vaccine', 'treatment'];\n    await db.insert(medicalSchedule).values({\n      animalId: someAnimals[i].id,\n      type: overdueTypes[Math.floor(Math.random() * 2)],\n      dueDate: yesterday,\n      status: 'scheduled',\n      notes: 'Overdue - needs attention'\n    });\n  }\n\n  console.log(\"Created medical tasks\");\n\n  // Create people (adopters, fosters)\n  const peopleData: Array<{\n    organizationId: string;\n    name: string;\n    email: string;\n    phone: string;\n    type: 'foster' | 'adopter';\n    flags: any;\n  }> = [];\n  for (let i = 0; i < 30; i++) {\n    peopleData.push({\n      organizationId: org.id,\n      name: `Person ${i + 1}`,\n      email: `person${i + 1}@example.com`,\n      phone: `555-${String(i).padStart(4, '0')}`,\n      type: (i < 15 ? 'foster' : 'adopter') as 'foster' | 'adopter',\n      flags: i < 15 ? { available: i < 10, maxCapacity: 2 } : {}\n    });\n  }\n  \n  const createdPeople = await db.insert(people).values(peopleData).returning();\n  console.log(\"Created people\");\n\n  // Create applications\n  for (let i = 0; i < 8; i++) {\n    const appStatuses: ('received' | 'review' | 'approved')[] = ['received', 'review', 'approved'];\n    await db.insert(applications).values({\n      animalId: someAnimals[i + 15].id,\n      personId: createdPeople[i + 15].id,\n      type: 'adoption',\n      status: appStatuses[Math.floor(Math.random() * 3)],\n      form: { homeType: 'house', hasYard: true, otherPets: false }\n    });\n  }\n\n  console.log(\"Created applications\");\n\n  // Create foster assignments\n  for (let i = 0; i < 15; i++) {\n    if (someAnimals[i + 30] && createdPeople[i]) {\n      await db.insert(fosterAssignments).values({\n        animalId: someAnimals[i + 30].id,\n        personId: createdPeople[i].id,\n        startDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000),\n        status: 'active'\n      });\n    }\n  }\n\n  console.log(\"Created foster assignments\");\n  console.log(\"Seeding complete!\");\n}\n\nseed().catch(console.error);\n","size_bytes":6246},"server/storage.ts":{"content":"import { db } from \"./db\";\nimport { users, animals, organizations, memberships, people, medicalSchedule, applications, intakes, adoptions, fosterAssignments, notes, photos, type User, type InsertUser, type Animal, type InsertAnimal, type Organization, type InsertOrganization, type Membership, type InsertMembership, type Person, type InsertPerson, type MedicalSchedule, type InsertMedicalSchedule, type Application, type InsertApplication, type Adoption, type InsertAdoption, type Note, type InsertNote, type Photo, type InsertPhoto } from \"@shared/schema\";\nimport { eq, and, desc, lte, gte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Organizations\n  getOrganization(id: string): Promise<Organization | undefined>;\n  createOrganization(org: InsertOrganization): Promise<Organization>;\n  \n  // Memberships\n  getUserMemberships(userId: string): Promise<(Membership & { organization: Organization })[]>;\n  createMembership(membership: InsertMembership): Promise<Membership>;\n  \n  // Animals\n  getAnimals(organizationId: string): Promise<Animal[]>;\n  getAnimal(id: string, organizationId: string): Promise<Animal | undefined>;\n  createAnimal(animal: InsertAnimal): Promise<Animal>;\n  updateAnimal(id: string, organizationId: string, data: Partial<InsertAnimal>): Promise<Animal>;\n  \n  // People\n  getPeople(organizationId: string): Promise<Person[]>;\n  getPerson(id: string, organizationId: string): Promise<Person | undefined>;\n  createPerson(person: InsertPerson): Promise<Person>;\n  \n  // Medical Schedule\n  getMedicalTasks(organizationId: string, filters?: { dueDate?: Date, status?: string }): Promise<(MedicalSchedule & { animal: Animal })[]>;\n  createMedicalTask(task: InsertMedicalSchedule): Promise<MedicalSchedule>;\n  updateMedicalTask(id: string, data: Partial<InsertMedicalSchedule>): Promise<MedicalSchedule>;\n  \n  // Applications\n  getApplications(organizationId: string): Promise<(Application & { animal: Animal, person: Person })[]>;\n  createApplication(application: InsertApplication): Promise<Application>;\n  updateApplication(id: string, data: Partial<InsertApplication>): Promise<Application>;\n  \n  // Adoptions\n  createAdoption(adoption: InsertAdoption): Promise<Adoption>;\n  \n  // Notes\n  getNotes(subjectType: string, subjectId: string): Promise<Note[]>;\n  createNote(note: InsertNote): Promise<Note>;\n  \n  // Photos\n  getPhotos(subjectType: string, subjectId: string): Promise<Photo[]>;\n  createPhoto(photo: InsertPhoto): Promise<Photo>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async getOrganization(id: string): Promise<Organization | undefined> {\n    const [org] = await db.select().from(organizations).where(eq(organizations.id, id));\n    return org || undefined;\n  }\n\n  async createOrganization(org: InsertOrganization): Promise<Organization> {\n    const [organization] = await db.insert(organizations).values(org).returning();\n    return organization;\n  }\n\n  async getUserMemberships(userId: string): Promise<(Membership & { organization: Organization })[]> {\n    const result = await db.select({\n      membership: memberships,\n      organization: organizations,\n    })\n    .from(memberships)\n    .leftJoin(organizations, eq(memberships.organizationId, organizations.id))\n    .where(eq(memberships.userId, userId));\n    \n    return result.map(r => ({ ...r.membership, organization: r.organization! }));\n  }\n\n  async createMembership(membership: InsertMembership): Promise<Membership> {\n    const [m] = await db.insert(memberships).values(membership).returning();\n    return m;\n  }\n\n  async getAnimals(organizationId: string): Promise<Animal[]> {\n    return await db.select().from(animals).where(eq(animals.organizationId, organizationId)).orderBy(desc(animals.createdAt));\n  }\n\n  async getAnimal(id: string, organizationId: string): Promise<Animal | undefined> {\n    const [animal] = await db.select().from(animals).where(and(eq(animals.id, id), eq(animals.organizationId, organizationId)));\n    return animal || undefined;\n  }\n\n  async createAnimal(animal: InsertAnimal): Promise<Animal> {\n    const [a] = await db.insert(animals).values(animal).returning();\n    return a;\n  }\n\n  async updateAnimal(id: string, organizationId: string, data: Partial<InsertAnimal>): Promise<Animal> {\n    const [animal] = await db.update(animals).set(data).where(and(eq(animals.id, id), eq(animals.organizationId, organizationId))).returning();\n    return animal;\n  }\n\n  async getPeople(organizationId: string): Promise<Person[]> {\n    return await db.select().from(people).where(eq(people.organizationId, organizationId)).orderBy(desc(people.createdAt));\n  }\n\n  async getPerson(id: string, organizationId: string): Promise<Person | undefined> {\n    const [person] = await db.select().from(people).where(and(eq(people.id, id), eq(people.organizationId, organizationId)));\n    return person || undefined;\n  }\n\n  async createPerson(person: InsertPerson): Promise<Person> {\n    const [p] = await db.insert(people).values(person).returning();\n    return p;\n  }\n\n  async getMedicalTasks(organizationId: string, filters?: { dueDate?: Date, status?: string }): Promise<(MedicalSchedule & { animal: Animal })[]> {\n    const conditions = [eq(animals.organizationId, organizationId)];\n    \n    if (filters?.dueDate) {\n      conditions.push(lte(medicalSchedule.dueDate, filters.dueDate));\n    }\n\n    const result = await db.select({\n      task: medicalSchedule,\n      animal: animals,\n    })\n    .from(medicalSchedule)\n    .leftJoin(animals, eq(medicalSchedule.animalId, animals.id))\n    .where(and(...conditions))\n    .orderBy(medicalSchedule.dueDate);\n    \n    return result.map(r => ({ ...r.task, animal: r.animal! }));\n  }\n\n  async createMedicalTask(task: InsertMedicalSchedule): Promise<MedicalSchedule> {\n    const [t] = await db.insert(medicalSchedule).values(task).returning();\n    return t;\n  }\n\n  async updateMedicalTask(id: string, data: Partial<InsertMedicalSchedule>): Promise<MedicalSchedule> {\n    const [task] = await db.update(medicalSchedule).set(data).where(eq(medicalSchedule.id, id)).returning();\n    return task;\n  }\n\n  async getApplications(organizationId: string): Promise<(Application & { animal: Animal, person: Person })[]> {\n    const result = await db.select({\n      application: applications,\n      animal: animals,\n      person: people,\n    })\n    .from(applications)\n    .leftJoin(animals, eq(applications.animalId, animals.id))\n    .leftJoin(people, eq(applications.personId, people.id))\n    .where(eq(animals.organizationId, organizationId))\n    .orderBy(desc(applications.createdAt));\n\n    return result.map(r => ({ ...r.application, animal: r.animal!, person: r.person! }));\n  }\n\n  async createApplication(application: InsertApplication): Promise<Application> {\n    const [app] = await db.insert(applications).values(application).returning();\n    return app;\n  }\n\n  async updateApplication(id: string, data: Partial<InsertApplication>): Promise<Application> {\n    const [app] = await db.update(applications).set(data).where(eq(applications.id, id)).returning();\n    return app;\n  }\n\n  async createAdoption(adoption: InsertAdoption): Promise<Adoption> {\n    const [a] = await db.insert(adoptions).values(adoption).returning();\n    return a;\n  }\n\n  async getNotes(subjectType: string, subjectId: string): Promise<Note[]> {\n    return await db.select().from(notes).where(and(eq(notes.subjectType, subjectType), eq(notes.subjectId, subjectId))).orderBy(desc(notes.createdAt));\n  }\n\n  async createNote(note: InsertNote): Promise<Note> {\n    const [n] = await db.insert(notes).values(note).returning();\n    return n;\n  }\n\n  async getPhotos(subjectType: string, subjectId: string): Promise<Photo[]> {\n    return await db.select().from(photos).where(and(eq(photos.subjectType, subjectType), eq(photos.subjectId, subjectId))).orderBy(desc(photos.createdAt));\n  }\n\n  async createPhoto(photo: InsertPhoto): Promise<Photo> {\n    const [p] = await db.insert(photos).values(photo).returning();\n    return p;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8684},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const roleEnum = pgEnum('role', ['admin', 'staff', 'volunteer', 'foster', 'readonly']);\nexport const speciesEnum = pgEnum('species', ['dog', 'cat', 'other']);\nexport const animalStatusEnum = pgEnum('animal_status', ['available', 'hold', 'adopted', 'transferred', 'rto', 'euthanized', 'fostered']);\nexport const intakeTypeEnum = pgEnum('intake_type', ['stray', 'owner_surrender', 'transfer_in', 'confiscation', 'born_in_care']);\nexport const outcomeTypeEnum = pgEnum('outcome_type', ['adoption', 'transfer_out', 'return_to_owner', 'euthanasia']);\nexport const medicalTypeEnum = pgEnum('medical_type', ['vaccine', 'treatment', 'surgery', 'exam']);\nexport const medicalStatusEnum = pgEnum('medical_status', ['scheduled', 'done', 'missed']);\nexport const personTypeEnum = pgEnum('person_type', ['adopter', 'foster', 'volunteer', 'donor', 'staff']);\nexport const applicationTypeEnum = pgEnum('application_type', ['adoption', 'foster']);\nexport const applicationStatusEnum = pgEnum('application_status', ['received', 'review', 'approved', 'denied', 'withdrawn']);\nexport const fosterStatusEnum = pgEnum('foster_status', ['active', 'completed', 'failed']);\nexport const noteVisibilityEnum = pgEnum('note_visibility', ['staff_only', 'public_to_portal']);\nexport const locationTypeEnum = pgEnum('location_type', ['shelter', 'clinic', 'storage']);\n\n// Organizations\nexport const organizations = pgTable(\"organizations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\"),\n  settings: jsonb(\"settings\").default('{}'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertOrganizationSchema = createInsertSchema(organizations).omit({ id: true, createdAt: true });\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\nexport type Organization = typeof organizations.$inferSelect;\n\n// Users\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  status: text(\"status\").default('active'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Memberships (user-organization with roles)\nexport const memberships = pgTable(\"memberships\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  role: roleEnum(\"role\").notNull().default('staff'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertMembershipSchema = createInsertSchema(memberships).omit({ id: true, createdAt: true });\nexport type InsertMembership = z.infer<typeof insertMembershipSchema>;\nexport type Membership = typeof memberships.$inferSelect;\n\n// Locations\nexport const locations = pgTable(\"locations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  type: locationTypeEnum(\"type\").notNull().default('shelter'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertLocationSchema = createInsertSchema(locations).omit({ id: true, createdAt: true });\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\nexport type Location = typeof locations.$inferSelect;\n\n// Kennels\nexport const kennels = pgTable(\"kennels\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  locationId: varchar(\"location_id\").references(() => locations.id, { onDelete: 'set null' }),\n  code: text(\"code\").notNull(),\n  size: text(\"size\"),\n  species: speciesEnum(\"species\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertKennelSchema = createInsertSchema(kennels).omit({ id: true, createdAt: true });\nexport type InsertKennel = z.infer<typeof insertKennelSchema>;\nexport type Kennel = typeof kennels.$inferSelect;\n\n// Animals\nexport const animals = pgTable(\"animals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  species: speciesEnum(\"species\").notNull(),\n  breed: text(\"breed\"),\n  sex: text(\"sex\"),\n  color: text(\"color\"),\n  dobEst: timestamp(\"dob_est\"),\n  intakeDate: timestamp(\"intake_date\").notNull().defaultNow(),\n  status: animalStatusEnum(\"status\").notNull().default('available'),\n  locationId: varchar(\"location_id\").references(() => locations.id, { onDelete: 'set null' }),\n  kennelId: varchar(\"kennel_id\").references(() => kennels.id, { onDelete: 'set null' }),\n  microchip: text(\"microchip\"),\n  photos: text(\"photos\").array(),\n  description: text(\"description\"),\n  attributes: jsonb(\"attributes\").default('{}'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertAnimalSchema = createInsertSchema(animals).omit({ id: true, createdAt: true });\nexport type InsertAnimal = z.infer<typeof insertAnimalSchema>;\nexport type Animal = typeof animals.$inferSelect;\n\n// Intakes\nexport const intakes = pgTable(\"intakes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  animalId: varchar(\"animal_id\").notNull().references(() => animals.id, { onDelete: 'cascade' }),\n  type: intakeTypeEnum(\"type\").notNull(),\n  source: jsonb(\"source\").default('{}'),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertIntakeSchema = createInsertSchema(intakes).omit({ id: true, createdAt: true });\nexport type InsertIntake = z.infer<typeof insertIntakeSchema>;\nexport type Intake = typeof intakes.$inferSelect;\n\n// Outcomes\nexport const outcomes = pgTable(\"outcomes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  animalId: varchar(\"animal_id\").notNull().references(() => animals.id, { onDelete: 'cascade' }),\n  type: outcomeTypeEnum(\"type\").notNull(),\n  date: timestamp(\"date\").notNull().defaultNow(),\n  details: jsonb(\"details\").default('{}'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertOutcomeSchema = createInsertSchema(outcomes).omit({ id: true, createdAt: true });\nexport type InsertOutcome = z.infer<typeof insertOutcomeSchema>;\nexport type Outcome = typeof outcomes.$inferSelect;\n\n// Medical Records\nexport const medicalRecords = pgTable(\"medical_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  animalId: varchar(\"animal_id\").notNull().references(() => animals.id, { onDelete: 'cascade' }),\n  type: medicalTypeEnum(\"type\").notNull(),\n  product: text(\"product\"),\n  dose: text(\"dose\"),\n  route: text(\"route\"),\n  dateGiven: timestamp(\"date_given\").notNull(),\n  vetId: varchar(\"vet_id\").references(() => users.id, { onDelete: 'set null' }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertMedicalRecordSchema = createInsertSchema(medicalRecords).omit({ id: true, createdAt: true });\nexport type InsertMedicalRecord = z.infer<typeof insertMedicalRecordSchema>;\nexport type MedicalRecord = typeof medicalRecords.$inferSelect;\n\n// Medical Schedule\nexport const medicalSchedule = pgTable(\"medical_schedule\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  animalId: varchar(\"animal_id\").notNull().references(() => animals.id, { onDelete: 'cascade' }),\n  type: medicalTypeEnum(\"type\").notNull(),\n  dueDate: timestamp(\"due_date\").notNull(),\n  assignedTo: varchar(\"assigned_to\").references(() => users.id, { onDelete: 'set null' }),\n  status: medicalStatusEnum(\"status\").notNull().default('scheduled'),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertMedicalScheduleSchema = createInsertSchema(medicalSchedule).omit({ id: true, createdAt: true });\nexport type InsertMedicalSchedule = z.infer<typeof insertMedicalScheduleSchema>;\nexport type MedicalSchedule = typeof medicalSchedule.$inferSelect;\n\n// People\nexport const people = pgTable(\"people\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  type: personTypeEnum(\"type\").notNull(),\n  flags: jsonb(\"flags\").default('{}'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertPersonSchema = createInsertSchema(people).omit({ id: true, createdAt: true });\nexport type InsertPerson = z.infer<typeof insertPersonSchema>;\nexport type Person = typeof people.$inferSelect;\n\n// Applications\nexport const applications = pgTable(\"applications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  animalId: varchar(\"animal_id\").notNull().references(() => animals.id, { onDelete: 'cascade' }),\n  personId: varchar(\"person_id\").notNull().references(() => people.id, { onDelete: 'cascade' }),\n  type: applicationTypeEnum(\"type\").notNull(),\n  status: applicationStatusEnum(\"status\").notNull().default('received'),\n  form: jsonb(\"form\").default('{}'),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertApplicationSchema = createInsertSchema(applications).omit({ id: true, createdAt: true });\nexport type InsertApplication = z.infer<typeof insertApplicationSchema>;\nexport type Application = typeof applications.$inferSelect;\n\n// Foster Assignments\nexport const fosterAssignments = pgTable(\"foster_assignments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  animalId: varchar(\"animal_id\").notNull().references(() => animals.id, { onDelete: 'cascade' }),\n  personId: varchar(\"person_id\").notNull().references(() => people.id, { onDelete: 'cascade' }),\n  startDate: timestamp(\"start_date\").notNull().defaultNow(),\n  endDate: timestamp(\"end_date\"),\n  status: fosterStatusEnum(\"status\").notNull().default('active'),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertFosterAssignmentSchema = createInsertSchema(fosterAssignments).omit({ id: true, createdAt: true });\nexport type InsertFosterAssignment = z.infer<typeof insertFosterAssignmentSchema>;\nexport type FosterAssignment = typeof fosterAssignments.$inferSelect;\n\n// Adoptions\nexport const adoptions = pgTable(\"adoptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  animalId: varchar(\"animal_id\").notNull().references(() => animals.id, { onDelete: 'cascade' }),\n  adopterId: varchar(\"adopter_id\").notNull().references(() => people.id, { onDelete: 'cascade' }),\n  date: timestamp(\"date\").notNull().defaultNow(),\n  feeCents: integer(\"fee_cents\").notNull().default(0),\n  donationCents: integer(\"donation_cents\").default(0),\n  contractUrl: text(\"contract_url\"),\n  paymentIntentId: text(\"payment_intent_id\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertAdoptionSchema = createInsertSchema(adoptions).omit({ id: true, createdAt: true });\nexport type InsertAdoption = z.infer<typeof insertAdoptionSchema>;\nexport type Adoption = typeof adoptions.$inferSelect;\n\n// Notes\nexport const notes = pgTable(\"notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subjectType: text(\"subject_type\").notNull(),\n  subjectId: varchar(\"subject_id\").notNull(),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  visibility: noteVisibilityEnum(\"visibility\").notNull().default('staff_only'),\n  body: text(\"body\").notNull(),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertNoteSchema = createInsertSchema(notes).omit({ id: true, createdAt: true });\nexport type InsertNote = z.infer<typeof insertNoteSchema>;\nexport type Note = typeof notes.$inferSelect;\n\n// Photos\nexport const photos = pgTable(\"photos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  subjectType: text(\"subject_type\").notNull(),\n  subjectId: varchar(\"subject_id\").notNull(),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  url: text(\"url\").notNull(),\n  caption: text(\"caption\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertPhotoSchema = createInsertSchema(photos).omit({ id: true, createdAt: true });\nexport type InsertPhoto = z.infer<typeof insertPhotoSchema>;\nexport type Photo = typeof photos.$inferSelect;\n\n// Volunteer Shifts\nexport const volunteerShifts = pgTable(\"volunteer_shifts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personId: varchar(\"person_id\").notNull().references(() => people.id, { onDelete: 'cascade' }),\n  locationId: varchar(\"location_id\").references(() => locations.id, { onDelete: 'set null' }),\n  start: timestamp(\"start\").notNull(),\n  end: timestamp(\"end\").notNull(),\n  hours: integer(\"hours\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertVolunteerShiftSchema = createInsertSchema(volunteerShifts).omit({ id: true, createdAt: true });\nexport type InsertVolunteerShift = z.infer<typeof insertVolunteerShiftSchema>;\nexport type VolunteerShift = typeof volunteerShifts.$inferSelect;\n\n// Inventory\nexport const inventoryItems = pgTable(\"inventory_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  name: text(\"name\").notNull(),\n  sku: text(\"sku\"),\n  qty: integer(\"qty\").notNull().default(0),\n  unit: text(\"unit\"),\n  threshold: integer(\"threshold\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertInventoryItemSchema = createInsertSchema(inventoryItems).omit({ id: true, createdAt: true });\nexport type InsertInventoryItem = z.infer<typeof insertInventoryItemSchema>;\nexport type InventoryItem = typeof inventoryItems.$inferSelect;\n\n// Report Jobs\nexport const reportJobs = pgTable(\"report_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  type: text(\"type\").notNull(),\n  params: jsonb(\"params\").default('{}'),\n  status: text(\"status\").notNull().default('pending'),\n  outputUrl: text(\"output_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertReportJobSchema = createInsertSchema(reportJobs).omit({ id: true, createdAt: true });\nexport type InsertReportJob = z.infer<typeof insertReportJobSchema>;\nexport type ReportJob = typeof reportJobs.$inferSelect;\n\n// Integration Configs\nexport const integrationConfigs = pgTable(\"integration_configs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  provider: text(\"provider\").notNull(),\n  config: jsonb(\"config\").default('{}'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertIntegrationConfigSchema = createInsertSchema(integrationConfigs).omit({ id: true, createdAt: true });\nexport type InsertIntegrationConfig = z.infer<typeof insertIntegrationConfigSchema>;\nexport type IntegrationConfig = typeof integrationConfigs.$inferSelect;\n\n// Audit Logs\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationId: varchar(\"organization_id\").notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  actorId: varchar(\"actor_id\").references(() => users.id, { onDelete: 'set null' }),\n  action: text(\"action\").notNull(),\n  entity: text(\"entity\").notNull(),\n  entityId: varchar(\"entity_id\"),\n  data: jsonb(\"data\").default('{}'),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({ id: true, createdAt: true });\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\n\n// Relations\nexport const organizationsRelations = relations(organizations, ({ many }) => ({\n  memberships: many(memberships),\n  animals: many(animals),\n  people: many(people),\n  locations: many(locations),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  memberships: many(memberships),\n  notes: many(notes),\n}));\n\nexport const membershipsRelations = relations(memberships, ({ one }) => ({\n  user: one(users, { fields: [memberships.userId], references: [users.id] }),\n  organization: one(organizations, { fields: [memberships.organizationId], references: [organizations.id] }),\n}));\n\nexport const animalsRelations = relations(animals, ({ one, many }) => ({\n  organization: one(organizations, { fields: [animals.organizationId], references: [organizations.id] }),\n  location: one(locations, { fields: [animals.locationId], references: [locations.id] }),\n  kennel: one(kennels, { fields: [animals.kennelId], references: [kennels.id] }),\n  intake: one(intakes),\n  outcomes: many(outcomes),\n  medicalRecords: many(medicalRecords),\n  medicalSchedule: many(medicalSchedule),\n  applications: many(applications),\n  fosterAssignments: many(fosterAssignments),\n  adoptions: many(adoptions),\n}));\n\nexport const peopleRelations = relations(people, ({ one, many }) => ({\n  organization: one(organizations, { fields: [people.organizationId], references: [organizations.id] }),\n  applications: many(applications),\n  fosterAssignments: many(fosterAssignments),\n  adoptions: many(adoptions),\n  volunteerShifts: many(volunteerShifts),\n}));\n\nexport const applicationsRelations = relations(applications, ({ one }) => ({\n  animal: one(animals, { fields: [applications.animalId], references: [animals.id] }),\n  person: one(people, { fields: [applications.personId], references: [people.id] }),\n}));\n","size_bytes":18983},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AnimalsIndex from \"@/pages/animals/index\";\nimport AnimalDetail from \"@/pages/animals/[id]\";\nimport IntakeWizard from \"@/pages/intake/wizard\";\nimport MedicalIndex from \"@/pages/medical/index\";\nimport AdoptionsPipeline from \"@/pages/adoptions/pipeline\";\nimport FostersPortal from \"@/pages/fosters/portal\";\nimport VolunteersPortal from \"@/pages/volunteers/portal\";\nimport ReportsIndex from \"@/pages/reports/index\";\nimport PeopleIndex from \"@/pages/people/index\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Login} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/animals/:id\" component={AnimalDetail} />\n      <Route path=\"/animals\" component={AnimalsIndex} />\n      <Route path=\"/intake\" component={IntakeWizard} />\n      <Route path=\"/medical\" component={MedicalIndex} />\n      <Route path=\"/adoptions\" component={AdoptionsPipeline} />\n      <Route path=\"/fosters\" component={FostersPortal} />\n      <Route path=\"/volunteers\" component={VolunteersPortal} />\n      <Route path=\"/people\" component={PeopleIndex} />\n      <Route path=\"/reports\" component={ReportsIndex} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1845},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 47%, 11%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 47%, 11%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 47%, 11%);\n  --primary: hsl(20, 91%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(45, 93%, 55%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(33, 100%, 97%);\n  --accent-foreground: hsl(222, 47%, 11%);\n  --destructive: hsl(0, 72%, 51%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 71%, 45%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(38, 92%, 50%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(20, 91%, 53%);\n  --radius: 0.75rem;\n  --font-sans: 'Inter', system-ui, sans-serif;\n}\n\n.dark {\n  --background: hsl(222, 47%, 11%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 47%, 11%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 47%, 11%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(20, 91%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(45, 93%, 55%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(217, 33%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 33%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(217, 33%, 17%);\n  --input: hsl(217, 33%, 17%);\n  --ring: hsl(20, 91%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n.hide-scrollbar::-webkit-scrollbar {\n  display: none;\n}\n\n.hide-scrollbar {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n","size_bytes":2041},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  user: {\n    id: string;\n    name: string;\n    email: string;\n  };\n  organization: {\n    id: string;\n    name: string;\n  };\n  role: string;\n}\n\nexport const authApi = {\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    const res = await apiRequest(\"POST\", \"/api/v1/auth/login\", credentials);\n    return res.json();\n  },\n  \n  logout: async (): Promise<void> => {\n    await apiRequest(\"POST\", \"/api/v1/auth/logout\");\n  },\n  \n  getCurrentUser: async (): Promise<AuthResponse> => {\n    const res = await apiRequest(\"GET\", \"/api/v1/auth/me\");\n    return res.json();\n  },\n};\n\nexport const animalsApi = {\n  getAll: async () => {\n    const res = await apiRequest(\"GET\", \"/api/v1/animals\");\n    return res.json();\n  },\n  \n  getById: async (id: string) => {\n    const res = await apiRequest(\"GET\", `/api/v1/animals/${id}`);\n    return res.json();\n  },\n  \n  create: async (data: any) => {\n    const res = await apiRequest(\"POST\", \"/api/v1/animals\", data);\n    return res.json();\n  },\n  \n  update: async (id: string, data: any) => {\n    const res = await apiRequest(\"PATCH\", `/api/v1/animals/${id}`, data);\n    return res.json();\n  },\n};\n\nexport const medicalApi = {\n  getTasks: async () => {\n    const res = await apiRequest(\"GET\", \"/api/v1/medical/schedule\");\n    return res.json();\n  },\n  \n  createTask: async (data: any) => {\n    const res = await apiRequest(\"POST\", \"/api/v1/medical/schedule\", data);\n    return res.json();\n  },\n  \n  updateTask: async (id: string, data: any) => {\n    const res = await apiRequest(\"PATCH\", `/api/v1/medical/schedule/${id}`, data);\n    return res.json();\n  },\n};\n\nexport const applicationsApi = {\n  getAll: async () => {\n    const res = await apiRequest(\"GET\", \"/api/v1/applications\");\n    return res.json();\n  },\n  \n  create: async (data: any) => {\n    const res = await apiRequest(\"POST\", \"/api/v1/applications\", data);\n    return res.json();\n  },\n  \n  update: async (id: string, data: any) => {\n    const res = await apiRequest(\"PATCH\", `/api/v1/applications/${id}`, data);\n    return res.json();\n  },\n};\n\nexport const peopleApi = {\n  getAll: async () => {\n    const res = await apiRequest(\"GET\", \"/api/v1/people\");\n    return res.json();\n  },\n  \n  create: async (data: any) => {\n    const res = await apiRequest(\"POST\", \"/api/v1/people\", data);\n    return res.json();\n  },\n};\n\nexport const reportsApi = {\n  getFeed: async (type: 'petfinder' | 'adoptapet') => {\n    const res = await apiRequest(\"GET\", `/api/v1/feeds/${type}.xml`);\n    return res.text();\n  },\n};\n","size_bytes":2673},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { medicalApi, animalsApi } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dog, Stethoscope, HeartHandshake, HeartPulse, TrendingUp, AlertTriangle, Calendar, CheckCircle } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { data: animals = [] } = useQuery<any[]>({\n    queryKey: [\"/api/v1/animals\"],\n  });\n\n  const { data: medicalTasks = [] } = useQuery<any[]>({\n    queryKey: [\"/api/v1/medical/schedule\"],\n  });\n\n  const stats = {\n    totalAnimals: animals.length,\n    available: animals.filter((a: any) => a.status === 'available').length,\n    fostered: animals.filter((a: any) => a.status === 'fostered').length,\n    overdueTasks: medicalTasks.filter((t: any) => t.status === 'scheduled' && new Date(t.dueDate) < new Date()).length,\n  };\n\n  return (\n    <AppLayout title=\"Dashboard\" subtitle=\"Welcome back! Here's what's happening today.\">\n      {/* Quick Stats */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6\">\n        <Card data-testid=\"card-stat-total\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">Animals in Care</p>\n              <Dog className=\"w-5 h-5 text-primary\" />\n            </div>\n            <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-total-animals\">{stats.totalAnimals}</p>\n            <p className=\"text-xs text-success mt-2\">\n              <TrendingUp className=\"w-3 h-3 inline mr-1\" />\n              Active animals\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-stat-available\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">Available</p>\n              <CheckCircle className=\"w-5 h-5 text-success\" />\n            </div>\n            <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-available-animals\">{stats.available}</p>\n            <p className=\"text-xs text-muted-foreground mt-2\">Ready for adoption</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-stat-fostered\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">In Foster</p>\n              <HeartPulse className=\"w-5 h-5 text-secondary\" />\n            </div>\n            <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-fostered-animals\">{stats.fostered}</p>\n            <p className=\"text-xs text-muted-foreground mt-2\">With fosters</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-stat-overdue\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">Medical Tasks Due</p>\n              <Stethoscope className=\"w-5 h-5 text-warning\" />\n            </div>\n            <p className=\"text-3xl font-bold text-foreground\" data-testid=\"text-overdue-tasks\">{stats.overdueTasks}</p>\n            <p className=\"text-xs text-destructive mt-2\">\n              <AlertTriangle className=\"w-3 h-3 inline mr-1\" />\n              {stats.overdueTasks} overdue\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Alerts */}\n      {stats.overdueTasks > 0 && (\n        <div className=\"bg-destructive/10 border border-destructive/20 rounded-xl p-4 flex items-start space-x-3 mb-6\" data-testid=\"alert-overdue-tasks\">\n          <AlertTriangle className=\"w-5 h-5 text-destructive mt-0.5\" />\n          <div className=\"flex-1\">\n            <p className=\"font-semibold text-destructive\">\n              {stats.overdueTasks} Overdue Medical Tasks\n            </p>\n            <p className=\"text-sm text-destructive/80 mt-1\">\n              Medical schedules need immediate attention\n            </p>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" className=\"text-destructive border-destructive\" data-testid=\"button-view-overdue\">\n            View All\n          </Button>\n        </div>\n      )}\n\n      {/* Today's Medical Tasks */}\n      <Card data-testid=\"card-medical-tasks\">\n        <CardHeader className=\"border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"text-lg\">Today's Medical Tasks</CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"text-tasks-count\">\n                {medicalTasks.length} tasks\n              </p>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-batch-actions\">Batch Actions</Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"divide-y divide-border\">\n            {medicalTasks.length === 0 ? (\n              <div className=\"p-8 text-center text-muted-foreground\" data-testid=\"empty-tasks\">\n                <Stethoscope className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>No medical tasks scheduled</p>\n              </div>\n            ) : (\n              medicalTasks.slice(0, 5).map((task: any) => (\n                <div key={task.id} className=\"p-4 hover:bg-accent/50 transition-colors\" data-testid={`task-${task.id}`}>\n                  <div className=\"flex items-start gap-4\">\n                    <input type=\"checkbox\" className=\"mt-1 w-5 h-5 rounded border-input text-primary\" data-testid={`checkbox-task-${task.id}`} />\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <p className=\"font-medium text-foreground\" data-testid={`text-animal-${task.animal?.name}`}>\n                            {task.animal?.name || 'Unknown'}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">{task.type} - {task.notes}</p>\n                        </div>\n                        <Badge variant={task.status === 'scheduled' ? 'secondary' : 'default'} data-testid={`badge-status-${task.id}`}>\n                          {task.status}\n                        </Badge>\n                      </div>\n                    </div>\n                    <Button size=\"sm\" className=\"bg-success hover:bg-success/90\" data-testid={`button-complete-${task.id}`}>\n                      Mark Done\n                    </Button>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </AppLayout>\n  );\n}\n","size_bytes":6998},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { authApi } from \"@/lib/api\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const loginMutation = useMutation({\n    mutationFn: authApi.login,\n    onSuccess: () => {\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to 4Paws!\",\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate({ email, password });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-accent via-background to-orange-50 p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-2xl border border-border\">\n          <CardContent className=\"pt-8 pb-8\">\n            {/* Logo and Header */}\n            <div className=\"text-center mb-8\">\n              <div className=\"inline-flex items-center justify-center w-20 h-20 bg-primary rounded-2xl mb-4\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-10 h-10 text-primary-foreground\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n                </svg>\n              </div>\n              <h1 className=\"text-3xl font-bold text-foreground mb-2\">4Paws</h1>\n              <p className=\"text-muted-foreground\">Animal Shelter Management</p>\n            </div>\n\n            {/* Login Form */}\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\" className=\"text-sm font-medium text-foreground mb-1.5\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"staff@shelter.org\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  className=\"w-full\"\n                  data-testid=\"input-email\"\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\" className=\"text-sm font-medium text-foreground mb-1.5\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"w-full\"\n                  data-testid=\"input-password\"\n                  required\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between text-sm\">\n                <label className=\"flex items-center gap-2 cursor-pointer\">\n                  <input type=\"checkbox\" className=\"w-4 h-4 rounded border-input text-primary focus:ring-2 focus:ring-ring\" />\n                  <span className=\"text-muted-foreground\">Remember me</span>\n                </label>\n                <a href=\"#\" className=\"text-primary hover:text-orange-600 transition-colors\">Forgot password?</a>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n\n            {/* Demo Credentials */}\n            <div className=\"mt-6 p-4 bg-accent rounded-lg border border-border\">\n              <p className=\"text-xs font-semibold text-foreground mb-2\">Demo Credentials:</p>\n              <div className=\"text-xs text-muted-foreground space-y-1\">\n                <p>• Admin: staff@demo.4paws.org / demo-only</p>\n                <p>• Foster: foster@demo.4paws.org / demo-only</p>\n                <p>• Volunteer: volunteer@demo.4paws.org / demo-only</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-6 text-sm text-muted-foreground\">\n          <p>Multi-tenant shelter management • Secure & RBAC-enabled</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5109},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/layout/app-layout.tsx":{"content":"import { useIsMobile } from \"@/hooks/use-mobile\";\nimport Sidebar from \"./sidebar\";\nimport MobileNav from \"./mobile-nav\";\nimport { Bell, Search } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n  title: string;\n  subtitle?: string;\n}\n\nexport default function AppLayout({ children, title, subtitle }: AppLayoutProps) {\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"min-h-screen bg-muted/30\">\n      {!isMobile && <Sidebar />}\n      \n      <div className={isMobile ? \"\" : \"lg:pl-64\"}>\n        {/* Top Header */}\n        <header className=\"bg-card border-b border-border px-4 lg:px-8 py-4 sticky top-0 z-30\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"lg:hidden\" data-testid=\"button-mobile-menu\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-6 h-6\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\" />\n                </svg>\n              </Button>\n              <div>\n                <h1 className=\"text-xl lg:text-2xl font-bold text-foreground\" data-testid=\"text-page-title\">{title}</h1>\n                {subtitle && <p className=\"text-sm text-muted-foreground hidden lg:block\" data-testid=\"text-page-subtitle\">{subtitle}</p>}\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2 lg:space-x-4\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"relative\" data-testid=\"button-notifications\">\n                <Bell className=\"w-6 h-6 text-muted-foreground\" />\n                <span className=\"absolute top-1 right-1 w-2 h-2 bg-destructive rounded-full\"></span>\n              </Button>\n              <Button className=\"hidden lg:flex\" data-testid=\"button-quick-intake\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-5 h-5 mr-2\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 4.5v15m7.5-7.5h-15\" />\n                </svg>\n                Quick Intake\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content */}\n        <main className=\"p-4 lg:p-8\" data-testid=\"main-content\">\n          {children}\n        </main>\n\n        {isMobile && <MobileNav />}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2646},"client/src/components/layout/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { LayoutDashboard, Dog, ClipboardPlus, Stethoscope, Menu } from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Home\", href: \"/dashboard\", icon: LayoutDashboard },\n  { name: \"Animals\", href: \"/animals\", icon: Dog },\n  { name: \"Intake\", href: \"/intake\", icon: ClipboardPlus },\n  { name: \"Medical\", href: \"/medical\", icon: Stethoscope },\n  { name: \"More\", href: \"/more\", icon: Menu },\n];\n\nexport default function MobileNav() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"lg:hidden bg-card border-t border-border px-2 py-2 flex items-center justify-around fixed bottom-0 left-0 right-0 z-50\">\n      {navigation.map((item, index) => {\n        const isActive = location === item.href;\n        const isCenter = index === 2; // Intake button in center\n        \n        if (isCenter) {\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className=\"flex items-center justify-center w-14 h-14 -mt-6 bg-primary rounded-full text-primary-foreground shadow-lg\"\n              data-testid={`link-mobile-${item.name.toLowerCase()}`}\n            >\n              <item.icon className=\"w-7 h-7\" />\n            </Link>\n          );\n        }\n        \n        return (\n          <Link\n            key={item.name}\n            href={item.href}\n            className={cn(\n              \"flex flex-col items-center space-y-1 px-3 py-2 rounded-lg\",\n              isActive ? \"bg-primary/10 text-primary\" : \"text-muted-foreground\"\n            )}\n            data-testid={`link-mobile-${item.name.toLowerCase()}`}\n          >\n            <item.icon className=\"w-6 h-6\" />\n            <span className=\"text-xs font-medium\">{item.name}</span>\n          </Link>\n        );\n      })}\n    </nav>\n  );\n}\n","size_bytes":1840},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  LayoutDashboard, \n  Dog, \n  Users, \n  ClipboardPlus, \n  Stethoscope, \n  HeartHandshake, \n  HeartPulse, \n  HandHeart, \n  BarChart3, \n  Settings \n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: LayoutDashboard },\n  { name: \"Animals\", href: \"/animals\", icon: Dog },\n  { name: \"People\", href: \"/people\", icon: Users },\n  { name: \"Intake\", href: \"/intake\", icon: ClipboardPlus },\n  { name: \"Medical\", href: \"/medical\", icon: Stethoscope },\n  { name: \"Adoptions\", href: \"/adoptions\", icon: HeartHandshake },\n  { name: \"Fosters\", href: \"/fosters\", icon: HeartPulse },\n  { name: \"Volunteers\", href: \"/volunteers\", icon: HandHeart },\n  { name: \"Reports\", href: \"/reports\", icon: BarChart3 },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"hidden lg:fixed lg:inset-y-0 lg:flex lg:w-64 lg:flex-col bg-card border-r border-border\">\n      <div className=\"flex grow flex-col gap-y-5 overflow-y-auto px-4 py-6\">\n        {/* Logo */}\n        <Link href=\"/dashboard\" className=\"flex items-center gap-3 px-2\" data-testid=\"link-logo\">\n          <div className=\"flex items-center justify-center w-10 h-10 bg-primary rounded-lg\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-6 h-6 text-primary-foreground\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M12 6.042A8.967 8.967 0 0 0 6 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 0 1 6 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 0 1 6-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0 0 18 18a8.967 8.967 0 0 0-6 2.292m0-14.25v14.25\" />\n            </svg>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-bold text-foreground\">4Paws</h2>\n            <p className=\"text-xs text-muted-foreground\" data-testid=\"text-org-name\">Demo Shelter</p>\n          </div>\n        </Link>\n\n        {/* Navigation Links */}\n        <nav className=\"flex flex-1 flex-col\">\n          <ul className=\"space-y-1\">\n            {navigation.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <li key={item.name}>\n                  <Link \n                    href={item.href}\n                    className={cn(\n                      \"group flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium transition-colors\",\n                      isActive \n                        ? \"bg-primary/10 text-primary\" \n                        : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n                    )}\n                    data-testid={`link-nav-${item.name.toLowerCase()}`}\n                  >\n                    <item.icon className=\"w-5 h-5\" />\n                    <span>{item.name}</span>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n\n          {/* Settings at Bottom */}\n          <div className=\"mt-auto pt-4 border-t border-border\">\n            <Link \n              href=\"/settings\"\n              className=\"group flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium text-muted-foreground hover:bg-accent hover:text-accent-foreground transition-colors\"\n              data-testid=\"link-settings\"\n            >\n              <Settings className=\"w-5 h-5\" />\n              <span>Settings</span>\n            </Link>\n          </div>\n        </nav>\n\n        {/* User Profile */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex items-center space-x-3 px-4 py-3 rounded-lg hover:bg-muted transition-colors cursor-pointer\" data-testid=\"button-user-menu\">\n            <div className=\"w-8 h-8 bg-primary/20 rounded-full flex items-center justify-center\">\n              <span className=\"text-sm font-medium text-primary\">ST</span>\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-foreground\" data-testid=\"text-user-name\">Staff User</p>\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"text-user-role\">Admin</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4312},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/animal-card.tsx":{"content":"import { Card, CardContent } from \"./card\";\nimport { Badge } from \"./badge\";\nimport { Calendar, MapPin, Dog } from \"lucide-react\";\n\ninterface AnimalCardProps {\n  animal: {\n    id: string;\n    name: string;\n    species: string;\n    breed: string;\n    sex: string;\n    status: string;\n    intakeDate: string;\n    kennelId?: string;\n    locationId?: string;\n    photos?: string[];\n  };\n  onClick?: () => void;\n}\n\nexport function AnimalCard({ animal, onClick }: AnimalCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'available': return 'bg-success/10 text-success';\n      case 'fostered': return 'bg-secondary/20 text-secondary-foreground';\n      case 'hold': return 'bg-warning/20 text-warning';\n      case 'adopted': return 'bg-primary/10 text-primary';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <Card \n      className=\"overflow-hidden hover:shadow-lg transition-shadow cursor-pointer\" \n      onClick={onClick}\n      data-testid={`card-animal-${animal.id}`}\n    >\n      <div className=\"w-full h-48 bg-muted flex items-center justify-center\">\n        {animal.photos && animal.photos.length > 0 ? (\n          <img \n            src={animal.photos[0]} \n            alt={animal.name} \n            className=\"w-full h-full object-cover\"\n            data-testid={`img-animal-${animal.id}`}\n          />\n        ) : (\n          <Dog className=\"w-12 h-12 text-muted-foreground\" />\n        )}\n      </div>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <div>\n            <h3 className=\"font-semibold text-foreground\" data-testid={`text-name-${animal.name}`}>\n              {animal.name}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">\n              {animal.breed} • {animal.sex}\n            </p>\n          </div>\n          <Badge className={getStatusColor(animal.status)} data-testid={`badge-status-${animal.id}`}>\n            {animal.status}\n          </Badge>\n        </div>\n        <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n          <MapPin className=\"w-3 h-3\" />\n          <span>{animal.kennelId || 'No kennel'}</span>\n          <span>•</span>\n          <Calendar className=\"w-3 h-3\" />\n          <span>{new Date(animal.intakeDate).toLocaleDateString()}</span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2420},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/empty-state.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { Button } from \"./button\";\n\ninterface EmptyStateProps {\n  icon: LucideIcon;\n  title: string;\n  description?: string;\n  actionLabel?: string;\n  onAction?: () => void;\n}\n\nexport function EmptyState({ icon: Icon, title, description, actionLabel, onAction }: EmptyStateProps) {\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 px-4 text-center\" data-testid=\"empty-state\">\n      <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n        <Icon className=\"w-8 h-8 text-muted-foreground\" />\n      </div>\n      <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"text-empty-title\">{title}</h3>\n      {description && (\n        <p className=\"text-sm text-muted-foreground max-w-md mb-4\" data-testid=\"text-empty-description\">\n          {description}\n        </p>\n      )}\n      {actionLabel && onAction && (\n        <Button onClick={onAction} data-testid=\"button-empty-action\">\n          {actionLabel}\n        </Button>\n      )}\n    </div>\n  );\n}\n","size_bytes":1074},"client/src/components/ui/file-upload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Upload, Camera, X } from \"lucide-react\";\nimport { Button } from \"./button\";\n\ninterface FileUploadProps {\n  onFileSelect: (file: File) => void;\n  accept?: string;\n  maxSize?: number;\n  showCamera?: boolean;\n  preview?: string;\n  onClearPreview?: () => void;\n}\n\nexport function FileUpload({ \n  onFileSelect, \n  accept = \"image/*\", \n  maxSize = 10 * 1024 * 1024,\n  showCamera = false,\n  preview,\n  onClearPreview\n}: FileUploadProps) {\n  const [dragActive, setDragActive] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    if (e.dataTransfer.files && e.dataTransfer.files[0]) {\n      handleFile(e.dataTransfer.files[0]);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    if (e.target.files && e.target.files[0]) {\n      handleFile(e.target.files[0]);\n    }\n  };\n\n  const handleFile = (file: File) => {\n    if (file.size > maxSize) {\n      alert(`File size must be less than ${maxSize / 1024 / 1024}MB`);\n      return;\n    }\n    onFileSelect(file);\n  };\n\n  const handleClick = () => {\n    inputRef.current?.click();\n  };\n\n  if (preview) {\n    return (\n      <div className=\"relative w-full h-64 rounded-xl overflow-hidden border-2 border-border\" data-testid=\"file-upload-preview\">\n        <img src={preview} alt=\"Preview\" className=\"w-full h-full object-cover\" />\n        {onClearPreview && (\n          <Button\n            size=\"icon\"\n            variant=\"destructive\"\n            className=\"absolute top-2 right-2\"\n            onClick={onClearPreview}\n            data-testid=\"button-clear-preview\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full\" data-testid=\"file-upload\">\n      <div\n        className={`border-2 border-dashed rounded-xl p-12 text-center transition-colors cursor-pointer ${\n          dragActive ? 'border-primary bg-primary/5' : 'border-border hover:border-primary'\n        }`}\n        onDragEnter={handleDrag}\n        onDragLeave={handleDrag}\n        onDragOver={handleDrag}\n        onDrop={handleDrop}\n        onClick={handleClick}\n      >\n        <input\n          ref={inputRef}\n          type=\"file\"\n          className=\"hidden\"\n          accept={accept}\n          onChange={handleChange}\n          data-testid=\"input-file\"\n        />\n        <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Camera className=\"w-8 h-8 text-primary\" />\n        </div>\n        <p className=\"font-medium text-foreground mb-1\">Click to upload or drag and drop</p>\n        <p className=\"text-sm text-muted-foreground\">PNG, JPG up to {maxSize / 1024 / 1024}MB</p>\n        <Button className=\"mt-4\" type=\"button\" data-testid=\"button-choose-file\">\n          <Upload className=\"w-4 h-4 mr-2\" />\n          Choose File\n        </Button>\n      </div>\n      {showCamera && (\n        <div className=\"mt-4 lg:hidden\">\n          <Button className=\"w-full\" variant=\"outline\" data-testid=\"button-take-photo\">\n            <Camera className=\"w-4 h-4 mr-2\" />\n            Take Photo Now\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3612},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/metric-card.tsx":{"content":"import { LucideIcon } from \"lucide-react\";\nimport { Card, CardContent } from \"./card\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  iconColor?: string;\n  trend?: {\n    value: string;\n    positive?: boolean;\n  };\n  testId?: string;\n}\n\nexport function MetricCard({ title, value, icon: Icon, iconColor = \"text-primary\", trend, testId }: MetricCardProps) {\n  return (\n    <Card data-testid={testId}>\n      <CardContent className=\"pt-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <p className=\"text-sm font-medium text-muted-foreground\" data-testid={`text-metric-title-${testId}`}>{title}</p>\n          <Icon className={`w-5 h-5 ${iconColor}`} />\n        </div>\n        <p className=\"text-3xl font-bold text-foreground\" data-testid={`text-metric-value-${testId}`}>{value}</p>\n        {trend && (\n          <p className={`text-xs mt-2 ${trend.positive ? 'text-success' : 'text-destructive'}`} data-testid={`text-metric-trend-${testId}`}>\n            {trend.value}\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1106},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/adoptions/checkout.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { CreditCard, DollarSign } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdoptionCheckout() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [adoptionFee] = useState(150);\n  const [donationAmount, setDonationAmount] = useState(0);\n\n  const checkoutMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/v1/adoptions/checkout\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Payment initiated\",\n        description: \"Processing your adoption payment\",\n      });\n      // In production, would redirect to Stripe checkout\n      setTimeout(() => {\n        setLocation(\"/adoptions\");\n      }, 2000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const suggestedDonations = [25, 50, 100, 200];\n  const totalAmount = adoptionFee + donationAmount;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    checkoutMutation.mutate({\n      animalId: \"sample-animal-id\",\n      adopterId: \"sample-adopter-id\",\n      feeCents: adoptionFee * 100,\n      donationCents: donationAmount * 100,\n    });\n  };\n\n  return (\n    <AppLayout title=\"Adoption Checkout\" subtitle=\"Complete your adoption\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"grid gap-6 lg:grid-cols-3\">\n          {/* Main Form */}\n          <div className=\"lg:col-span-2\">\n            <Card data-testid=\"card-checkout-form\">\n              <CardHeader>\n                <CardTitle>Payment Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  {/* Adopter Details */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold text-foreground\">Adopter Details</h3>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"firstName\">First Name</Label>\n                        <Input id=\"firstName\" required data-testid=\"input-first-name\" />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"lastName\">Last Name</Label>\n                        <Input id=\"lastName\" required data-testid=\"input-last-name\" />\n                      </div>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\">Email</Label>\n                      <Input id=\"email\" type=\"email\" required data-testid=\"input-email\" />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"phone\">Phone</Label>\n                      <Input id=\"phone\" type=\"tel\" required data-testid=\"input-phone\" />\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Payment Method */}\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-semibold text-foreground\">Payment Method</h3>\n                    <div className=\"p-4 bg-muted rounded-lg border border-border\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <CreditCard className=\"w-5 h-5 text-primary\" />\n                        <span className=\"font-medium text-foreground\">Credit or Debit Card</span>\n                      </div>\n                      <div className=\"space-y-3\">\n                        <div>\n                          <Label htmlFor=\"cardNumber\">Card Number</Label>\n                          <Input id=\"cardNumber\" placeholder=\"1234 5678 9012 3456\" data-testid=\"input-card-number\" />\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-3\">\n                          <div>\n                            <Label htmlFor=\"expiry\">Expiry</Label>\n                            <Input id=\"expiry\" placeholder=\"MM/YY\" data-testid=\"input-expiry\" />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"cvc\">CVC</Label>\n                            <Input id=\"cvc\" placeholder=\"123\" data-testid=\"input-cvc\" />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    size=\"lg\"\n                    disabled={checkoutMutation.isPending}\n                    data-testid=\"button-complete-payment\"\n                  >\n                    {checkoutMutation.isPending ? \"Processing...\" : `Complete Payment - $${totalAmount}`}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"sticky top-4\" data-testid=\"card-order-summary\">\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Animal Info */}\n                <div className=\"flex items-center gap-3 pb-4 border-b border-border\">\n                  <div className=\"w-16 h-16 rounded-lg bg-muted flex items-center justify-center\">\n                    <span className=\"text-2xl\">🐕</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">Sample Animal</p>\n                    <p className=\"text-sm text-muted-foreground\">Golden Retriever</p>\n                  </div>\n                </div>\n\n                {/* Fees */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Adoption Fee</span>\n                    <span className=\"font-medium text-foreground\" data-testid=\"text-adoption-fee\">\n                      ${adoptionFee}\n                    </span>\n                  </div>\n\n                  <div className=\"pt-3 border-t border-border\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <DollarSign className=\"w-4 h-4 text-primary\" />\n                      <span className=\"text-sm font-medium text-foreground\">Add a Donation</span>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {suggestedDonations.map((amount) => (\n                        <Button\n                          key={amount}\n                          variant={donationAmount === amount ? \"default\" : \"outline\"}\n                          size=\"sm\"\n                          onClick={() => setDonationAmount(amount)}\n                          type=\"button\"\n                          data-testid={`button-donation-${amount}`}\n                        >\n                          ${amount}\n                        </Button>\n                      ))}\n                    </div>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Custom amount\"\n                      className=\"mt-2\"\n                      value={donationAmount || ''}\n                      onChange={(e) => setDonationAmount(Number(e.target.value))}\n                      data-testid=\"input-custom-donation\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Total */}\n                <div className=\"flex items-center justify-between text-lg font-bold\">\n                  <span className=\"text-foreground\">Total</span>\n                  <span className=\"text-primary\" data-testid=\"text-total-amount\">\n                    ${totalAmount}\n                  </span>\n                </div>\n\n                <div className=\"pt-4 border-t border-border\">\n                  <p className=\"text-xs text-muted-foreground\">\n                    Your donation helps us continue our mission of rescuing and caring for animals in need.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":8883},"client/src/pages/adoptions/pipeline.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { applicationsApi } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, User, Calendar } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { EmptyState } from \"@/components/ui/empty-state\";\n\nexport default function AdoptionsPipeline() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: applications = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/v1/applications\"],\n  });\n\n  const updateApplicationMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: any }) => applicationsApi.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/applications\"] });\n      toast({\n        title: \"Application updated\",\n        description: \"Status has been changed successfully\",\n      });\n    },\n  });\n\n  const columns = [\n    { id: 'received', title: 'Received', color: 'bg-blue-500' },\n    { id: 'review', title: 'Under Review', color: 'bg-secondary' },\n    { id: 'approved', title: 'Approved', color: 'bg-success' },\n    { id: 'checkout', title: 'Checkout', color: 'bg-primary' },\n  ];\n\n  const getApplicationsByStatus = (status: string) => {\n    return applications.filter((app: any) => app.status === status);\n  };\n\n  const handleStatusChange = (appId: string, newStatus: string) => {\n    updateApplicationMutation.mutate({ id: appId, data: { status: newStatus } });\n  };\n\n  const handleCheckout = (appId: string) => {\n    setLocation(`/adoptions/checkout?applicationId=${appId}`);\n  };\n\n  return (\n    <AppLayout \n      title=\"Adoption Pipeline\" \n      subtitle={`${applications.length} applications • Track from submission to adoption`}\n    >\n      <Card className=\"mb-6\">\n        <CardHeader className=\"border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex gap-3\">\n              <Select defaultValue=\"all-animals\">\n                <SelectTrigger className=\"w-[180px]\" data-testid=\"select-animal-filter\">\n                  <SelectValue placeholder=\"All Animals\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-animals\">All Animals</SelectItem>\n                  <SelectItem value=\"dogs\">Dogs</SelectItem>\n                  <SelectItem value=\"cats\">Cats</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <Button data-testid=\"button-new-application\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Application\n            </Button>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {isLoading ? (\n        <div className=\"text-center py-12\" data-testid=\"loading-applications\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\"></div>\n        </div>\n      ) : applications.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12\">\n            <EmptyState\n              icon={User}\n              title=\"No applications yet\"\n              description=\"Adoption applications will appear here as they are submitted\"\n              actionLabel=\"Create Application\"\n              onAction={() => {}}\n            />\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"overflow-x-auto pb-4\">\n          <div className=\"flex gap-4 min-w-max\">\n            {columns.map((column) => {\n              const columnApps = getApplicationsByStatus(column.id);\n              return (\n                <Card key={column.id} className=\"w-80 flex-shrink-0\" data-testid={`column-${column.id}`}>\n                  <CardHeader className=\"border-b border-border bg-muted/50\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className={`w-2 h-2 rounded-full ${column.color}`}></div>\n                        <h3 className=\"font-semibold text-foreground\">{column.title}</h3>\n                      </div>\n                      <Badge variant=\"secondary\" data-testid={`badge-count-${column.id}`}>\n                        {columnApps.length}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"p-3 space-y-3 max-h-[600px] overflow-y-auto\">\n                    {columnApps.length === 0 ? (\n                      <div className=\"text-center py-8 text-muted-foreground text-sm\" data-testid={`empty-${column.id}`}>\n                        No applications\n                      </div>\n                    ) : (\n                      columnApps.map((app: any) => (\n                        <Card \n                          key={app.id} \n                          className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                          data-testid={`card-app-${app.id}`}\n                        >\n                          <CardContent className=\"p-4\">\n                            <div className=\"flex items-start gap-3 mb-3\">\n                              <div className=\"w-12 h-12 rounded-lg bg-muted flex items-center justify-center\">\n                                <User className=\"w-6 h-6 text-muted-foreground\" />\n                              </div>\n                              <div className=\"flex-1 min-w-0\">\n                                <p className=\"font-medium text-foreground truncate\" data-testid={`text-animal-${app.animal?.name}`}>\n                                  {app.animal?.name || 'Unknown'}\n                                </p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {app.animal?.breed || 'Unknown breed'}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-center gap-2\">\n                                <User className=\"w-4 h-4 text-muted-foreground\" />\n                                <p className=\"text-sm text-foreground\" data-testid={`text-applicant-${app.person?.name}`}>\n                                  {app.person?.name || 'Unknown'}\n                                </p>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {new Date(app.createdAt).toLocaleDateString()}\n                                </p>\n                              </div>\n                            </div>\n                            {column.id === 'approved' && (\n                              <Button \n                                className=\"w-full mt-3\" \n                                size=\"sm\"\n                                onClick={() => handleCheckout(app.id)}\n                                data-testid={`button-checkout-${app.id}`}\n                              >\n                                Proceed to Checkout\n                              </Button>\n                            )}\n                          </CardContent>\n                        </Card>\n                      ))\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </AppLayout>\n  );\n}\n","size_bytes":7976},"client/src/pages/animals/[id].tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useRoute, useLocation } from \"wouter\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { animalsApi } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dog, Calendar, MapPin, Edit, Trash2, FileText, Stethoscope, Heart } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AnimalDetail() {\n  const [, params] = useRoute(\"/animals/:id\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: animal, isLoading } = useQuery({\n    queryKey: [\"/api/v1/animals\", params?.id],\n    enabled: !!params?.id,\n  });\n\n  if (isLoading) {\n    return (\n      <AppLayout title=\"Loading...\" subtitle=\"Please wait\">\n        <div className=\"flex items-center justify-center py-12\" data-testid=\"loading-animal\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      </AppLayout>\n    );\n  }\n\n  if (!animal) {\n    return (\n      <AppLayout title=\"Not Found\" subtitle=\"Animal not found\">\n        <Card>\n          <CardContent className=\"py-12 text-center\">\n            <Dog className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground\" />\n            <p className=\"text-lg font-medium text-foreground mb-2\">Animal not found</p>\n            <Button onClick={() => setLocation(\"/animals\")} data-testid=\"button-back-to-list\">\n              Back to Animals\n            </Button>\n          </CardContent>\n        </Card>\n      </AppLayout>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'available': return 'bg-success/10 text-success';\n      case 'fostered': return 'bg-secondary/20 text-secondary-foreground';\n      case 'hold': return 'bg-warning/20 text-warning';\n      case 'adopted': return 'bg-primary/10 text-primary';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <AppLayout \n      title={animal.name} \n      subtitle={`${animal.breed} • ${animal.sex} • ID: ${animal.id.slice(0, 8)}`}\n    >\n      <div className=\"grid gap-6 lg:grid-cols-3\">\n        {/* Left Column - Photo and Quick Info */}\n        <div className=\"lg:col-span-1 space-y-6\">\n          <Card data-testid=\"card-animal-photo\">\n            <CardContent className=\"p-0\">\n              <div className=\"w-full aspect-square bg-muted flex items-center justify-center rounded-t-xl overflow-hidden\">\n                {animal.photos && animal.photos.length > 0 ? (\n                  <img \n                    src={animal.photos[0]} \n                    alt={animal.name}\n                    className=\"w-full h-full object-cover\"\n                    data-testid=\"img-animal-main\"\n                  />\n                ) : (\n                  <Dog className=\"w-24 h-24 text-muted-foreground\" />\n                )}\n              </div>\n              <div className=\"p-6 space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Badge className={getStatusColor(animal.status)} data-testid=\"badge-animal-status\">\n                    {animal.status}\n                  </Badge>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"icon\" variant=\"outline\" data-testid=\"button-edit\">\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    <Button size=\"icon\" variant=\"outline\" data-testid=\"button-delete\">\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Dog className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-foreground font-medium\">Species:</span>\n                    <span className=\"text-muted-foreground\">{animal.species}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-foreground font-medium\">DOB (Est):</span>\n                    <span className=\"text-muted-foreground\">\n                      {animal.dobEst ? new Date(animal.dobEst).toLocaleDateString() : 'Unknown'}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <MapPin className=\"w-4 h-4 text-muted-foreground\" />\n                    <span className=\"text-foreground font-medium\">Location:</span>\n                    <span className=\"text-muted-foreground\">{animal.kennelId || 'No kennel'}</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Right Column - Detailed Info */}\n        <div className=\"lg:col-span-2\">\n          <Tabs defaultValue=\"details\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"details\" data-testid=\"tab-details\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Details\n              </TabsTrigger>\n              <TabsTrigger value=\"medical\" data-testid=\"tab-medical\">\n                <Stethoscope className=\"w-4 h-4 mr-2\" />\n                Medical\n              </TabsTrigger>\n              <TabsTrigger value=\"applications\" data-testid=\"tab-applications\">\n                <Heart className=\"w-4 h-4 mr-2\" />\n                Applications\n              </TabsTrigger>\n              <TabsTrigger value=\"history\" data-testid=\"tab-history\">\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                History\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"details\" className=\"mt-6\">\n              <Card data-testid=\"card-details\">\n                <CardHeader>\n                  <CardTitle>Animal Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground mb-1\">Breed</p>\n                      <p className=\"text-foreground\" data-testid=\"text-breed\">{animal.breed}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground mb-1\">Color</p>\n                      <p className=\"text-foreground\" data-testid=\"text-color\">{animal.color}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground mb-1\">Sex</p>\n                      <p className=\"text-foreground\" data-testid=\"text-sex\">{animal.sex}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground mb-1\">Intake Date</p>\n                      <p className=\"text-foreground\" data-testid=\"text-intake-date\">\n                        {new Date(animal.intakeDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                    {animal.microchip && (\n                      <div className=\"col-span-2\">\n                        <p className=\"text-sm font-medium text-muted-foreground mb-1\">Microchip</p>\n                        <p className=\"text-foreground font-mono\" data-testid=\"text-microchip\">{animal.microchip}</p>\n                      </div>\n                    )}\n                  </div>\n                  {animal.description && (\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground mb-2\">Description</p>\n                      <p className=\"text-foreground\" data-testid=\"text-description\">{animal.description}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"medical\" className=\"mt-6\">\n              <Card data-testid=\"card-medical\">\n                <CardHeader>\n                  <CardTitle>Medical History</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Stethoscope className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                    <p>No medical records found</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"applications\" className=\"mt-6\">\n              <Card data-testid=\"card-applications\">\n                <CardHeader>\n                  <CardTitle>Adoption Applications</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Heart className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                    <p>No applications yet</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"history\" className=\"mt-6\">\n              <Card data-testid=\"card-history\">\n                <CardHeader>\n                  <CardTitle>Activity History</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Calendar className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                    <p>No activity history</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":10073},"client/src/pages/animals/index.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { animalsApi } from \"@/lib/api\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Filter, Plus, Calendar, MapPin } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function AnimalsIndex() {\n  const { data: animals = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/v1/animals\"],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'available': return 'bg-success/10 text-success';\n      case 'fostered': return 'bg-secondary/20 text-secondary-foreground';\n      case 'hold': return 'bg-warning/20 text-warning';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <AppLayout title=\"Animals\" subtitle={`${animals.length} animals in care`}>\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n              <Input \n                placeholder=\"Search by name or ID...\" \n                className=\"pl-10\"\n                data-testid=\"input-search-animals\"\n              />\n            </div>\n            <Select defaultValue=\"all-species\">\n              <SelectTrigger className=\"w-full lg:w-[180px]\" data-testid=\"select-species\">\n                <SelectValue placeholder=\"All Species\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all-species\">All Species</SelectItem>\n                <SelectItem value=\"dog\">Dogs</SelectItem>\n                <SelectItem value=\"cat\">Cats</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select defaultValue=\"all-status\">\n              <SelectTrigger className=\"w-full lg:w-[180px]\" data-testid=\"select-status\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all-status\">All Status</SelectItem>\n                <SelectItem value=\"available\">Available</SelectItem>\n                <SelectItem value=\"fostered\">Fostered</SelectItem>\n                <SelectItem value=\"hold\">On Hold</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button data-testid=\"button-add-animal\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Animal\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {isLoading ? (\n        <div className=\"text-center py-12\" data-testid=\"loading-animals\">\n          <div className=\"inline-block w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      ) : animals.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12 text-center\" data-testid=\"empty-animals\">\n            <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-8 h-8 text-muted-foreground\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.182 15.182a4.5 4.5 0 0 1-6.364 0M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM9.75 9.75c0 .414-.168.75-.375.75S9 10.164 9 9.75 9.168 9 9.375 9s.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Zm5.625 0c0 .414-.168.75-.375.75s-.375-.336-.375-.75.168-.75.375-.75.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Z\" />\n              </svg>\n            </div>\n            <p className=\"text-lg font-medium text-foreground mb-2\">No animals found</p>\n            <p className=\"text-sm text-muted-foreground\">Start by adding your first animal to the system</p>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\">\n          {animals.map((animal: any) => (\n            <Card key={animal.id} className=\"overflow-hidden hover:shadow-lg transition-shadow cursor-pointer\" data-testid={`card-animal-${animal.id}`}>\n              <div className=\"w-full h-48 bg-muted flex items-center justify-center\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-12 h-12 text-muted-foreground\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15.182 15.182a4.5 4.5 0 0 1-6.364 0M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM9.75 9.75c0 .414-.168.75-.375.75S9 10.164 9 9.75 9.168 9 9.375 9s.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Zm5.625 0c0 .414-.168.75-.375.75s-.375-.336-.375-.75.168-.75.375-.75.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Z\" />\n                </svg>\n              </div>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div>\n                    <h3 className=\"font-semibold text-foreground\" data-testid={`text-name-${animal.name}`}>{animal.name}</h3>\n                    <p className=\"text-sm text-muted-foreground\">{animal.breed} • {animal.sex}</p>\n                  </div>\n                  <Badge className={getStatusColor(animal.status)} data-testid={`badge-status-${animal.id}`}>\n                    {animal.status}\n                  </Badge>\n                </div>\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                  <MapPin className=\"w-3 h-3\" />\n                  <span>{animal.kennelId || 'No kennel'}</span>\n                  <span>•</span>\n                  <Calendar className=\"w-3 h-3\" />\n                  <span>{new Date(animal.intakeDate).toLocaleDateString()}</span>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </AppLayout>\n  );\n}\n","size_bytes":6198},"client/src/pages/fosters/index.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Plus, CheckCircle, XCircle, Calendar } from \"lucide-react\";\nimport { EmptyState } from \"@/components/ui/empty-state\";\n\nexport default function FostersIndex() {\n  const { data: fosters = [], isLoading } = useQuery({\n    queryKey: [\"/api/v1/people\"],\n    select: (data: any[]) => data.filter(p => p.type === 'foster'),\n  });\n\n  return (\n    <AppLayout title=\"Foster Management\" subtitle={`${fosters.length} active fosters`}>\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground\" />\n              <Input \n                placeholder=\"Search fosters...\" \n                className=\"pl-10\"\n                data-testid=\"input-search-fosters\"\n              />\n            </div>\n            <Select defaultValue=\"all-status\">\n              <SelectTrigger className=\"w-full lg:w-[180px]\" data-testid=\"select-status\">\n                <SelectValue placeholder=\"All Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all-status\">All Status</SelectItem>\n                <SelectItem value=\"available\">Available</SelectItem>\n                <SelectItem value=\"unavailable\">Unavailable</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button data-testid=\"button-add-foster\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Foster\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {isLoading ? (\n        <div className=\"text-center py-12\" data-testid=\"loading-fosters\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\"></div>\n        </div>\n      ) : fosters.length === 0 ? (\n        <Card>\n          <CardContent className=\"py-12\">\n            <EmptyState\n              icon={CheckCircle}\n              title=\"No fosters yet\"\n              description=\"Add foster families to your network to provide temporary homes for animals\"\n              actionLabel=\"Add First Foster\"\n              onAction={() => {}}\n            />\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n          {fosters.map((foster: any) => {\n            const isAvailable = foster.flags?.available !== false;\n            return (\n              <Card \n                key={foster.id} \n                className=\"hover:shadow-lg transition-shadow cursor-pointer\"\n                data-testid={`card-foster-${foster.id}`}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${\n                        isAvailable ? 'bg-success/10 text-success' : 'bg-muted text-muted-foreground'\n                      }`}>\n                        {foster.name.split(' ').map((n: string) => n[0]).join('').slice(0, 2)}\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-foreground\" data-testid={`text-name-${foster.id}`}>\n                          {foster.name}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">{foster.email}</p>\n                      </div>\n                    </div>\n                    <Badge \n                      className={isAvailable ? 'bg-success/10 text-success' : 'bg-muted text-muted-foreground'}\n                      data-testid={`badge-status-${foster.id}`}\n                    >\n                      {isAvailable ? (\n                        <>\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Available\n                        </>\n                      ) : (\n                        <>\n                          <XCircle className=\"w-3 h-3 mr-1\" />\n                          Unavailable\n                        </>\n                      )}\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-2 text-sm\">\n                    <p className=\"text-muted-foreground\">\n                      Max Capacity: <span className=\"text-foreground font-medium\">\n                        {foster.flags?.maxCapacity || 'Not set'}\n                      </span>\n                    </p>\n                    {foster.phone && (\n                      <p className=\"text-muted-foreground\">\n                        Phone: <span className=\"text-foreground\">{foster.phone}</span>\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      )}\n    </AppLayout>\n  );\n}\n","size_bytes":5427},"client/src/pages/fosters/portal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Camera, Weight, MessageSquare, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { MetricCard } from \"@/components/ui/metric-card\";\nimport { AddNoteDialog } from \"@/components/dialogs/add-note-dialog\";\nimport { AddPhotoDialog } from \"@/components/dialogs/add-photo-dialog\";\n\nexport default function FosterPortal() {\n  const [noteDialogOpen, setNoteDialogOpen] = useState(false);\n  const [photoDialogOpen, setPhotoDialogOpen] = useState(false);\n  const [selectedAnimal, setSelectedAnimal] = useState<any>(null);\n\n  const { data: fosterAnimals = [] } = useQuery({\n    queryKey: [\"/api/v1/animals\"],\n    select: (data: any[]) => data.filter(a => a.status === 'fostered').slice(0, 2),\n  });\n\n  const handleAddNote = (animal: any) => {\n    setSelectedAnimal(animal);\n    setNoteDialogOpen(true);\n  };\n\n  const handleAddPhoto = (animal: any) => {\n    setSelectedAnimal(animal);\n    setPhotoDialogOpen(true);\n  };\n\n  return (\n    <AppLayout title=\"My Foster Animals\" subtitle=\"Welcome back! You have 2 animals in your care.\">\n      {/* Availability Toggle */}\n      <Card className=\"mb-6\" data-testid=\"card-availability\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"font-semibold text-foreground mb-1\">Foster Availability</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Let us know when you're available to take in more animals\n              </p>\n            </div>\n            <Switch defaultChecked data-testid=\"switch-availability\" />\n          </div>\n          <div className=\"grid gap-3 sm:grid-cols-2\">\n            <div>\n              <Label className=\"text-xs font-medium text-muted-foreground mb-1\">Preferred Species</Label>\n              <Select defaultValue=\"puppies\">\n                <SelectTrigger data-testid=\"select-species\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"dogs\">Dogs</SelectItem>\n                  <SelectItem value=\"puppies\">Puppies</SelectItem>\n                  <SelectItem value=\"cats\">Cats</SelectItem>\n                  <SelectItem value=\"kittens\">Kittens</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label className=\"text-xs font-medium text-muted-foreground mb-1\">Max Capacity</Label>\n              <Select defaultValue=\"2\">\n                <SelectTrigger data-testid=\"select-capacity\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\">1 animal</SelectItem>\n                  <SelectItem value=\"2\">2 animals</SelectItem>\n                  <SelectItem value=\"3\">3 animals</SelectItem>\n                  <SelectItem value=\"4\">4+ animals</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Foster Animals */}\n      <div className=\"grid gap-6 lg:grid-cols-2\">\n        {fosterAnimals.map((animal: any) => (\n          <Card key={animal.id} className=\"overflow-hidden\" data-testid={`card-foster-animal-${animal.id}`}>\n            <div className=\"w-full h-48 bg-muted flex items-center justify-center\">\n              <span className=\"text-6xl\">🐕</span>\n            </div>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div>\n                  <h3 className=\"text-xl font-bold text-foreground\" data-testid={`text-animal-name-${animal.name}`}>\n                    {animal.name}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    {animal.breed} • {animal.sex} • 10 weeks\n                  </p>\n                </div>\n                <Badge className=\"bg-success/10 text-success\">\n                  Day 12 of foster\n                </Badge>\n              </div>\n\n              {/* Quick Stats */}\n              <div className=\"grid grid-cols-3 gap-3 mb-4\">\n                <div className=\"text-center p-3 bg-muted rounded-lg\">\n                  <p className=\"text-2xl font-bold text-foreground\">8.2</p>\n                  <p className=\"text-xs text-muted-foreground\">lbs</p>\n                </div>\n                <div className=\"text-center p-3 bg-muted rounded-lg\">\n                  <p className=\"text-2xl font-bold text-foreground\">3</p>\n                  <p className=\"text-xs text-muted-foreground\">updates</p>\n                </div>\n                <div className=\"text-center p-3 bg-muted rounded-lg\">\n                  <p className=\"text-2xl font-bold text-foreground\">12</p>\n                  <p className=\"text-xs text-muted-foreground\">photos</p>\n                </div>\n              </div>\n\n              {/* Quick Actions */}\n              <div className=\"grid grid-cols-2 gap-2\">\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\" \n                  data-testid={`button-add-photo-${animal.id}`}\n                  onClick={() => handleAddPhoto(animal)}\n                >\n                  <Camera className=\"w-4 h-4 mr-2\" />\n                  Add Photo\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\" data-testid={`button-log-weight-${animal.id}`}>\n                  <Weight className=\"w-4 h-4 mr-2\" />\n                  Log Weight\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full col-span-2\" \n                  data-testid={`button-add-note-${animal.id}`}\n                  onClick={() => handleAddNote(animal)}\n                >\n                  <MessageSquare className=\"w-4 h-4 mr-2\" />\n                  Add Note\n                </Button>\n              </div>\n\n              {/* Medical Alert */}\n              <div className=\"mt-4 p-3 bg-warning/10 border border-warning/30 rounded-lg\">\n                <div className=\"flex items-start gap-2\">\n                  <AlertTriangle className=\"w-4 h-4 text-warning mt-0.5\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-foreground\">Dewormer Due Tomorrow</p>\n                    <p className=\"text-xs text-muted-foreground\">Drontal - 1 tablet with food</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Report Issue */}\n      <Card className=\"mt-6\" data-testid=\"card-report-issue\">\n        <CardHeader>\n          <CardTitle>Report an Issue</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4 sm:grid-cols-2\">\n            <Button variant=\"outline\" className=\"h-auto p-4 justify-start\" data-testid=\"button-medical-issue\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-lg bg-destructive/10 flex items-center justify-center\">\n                  <AlertTriangle className=\"w-5 h-5 text-destructive\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"font-medium text-foreground\">Medical Issue</p>\n                  <p className=\"text-xs text-muted-foreground\">Report illness or injury</p>\n                </div>\n              </div>\n            </Button>\n            <Button variant=\"outline\" className=\"h-auto p-4 justify-start\" data-testid=\"button-behavior-concern\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 rounded-lg bg-warning/10 flex items-center justify-center\">\n                  <MessageSquare className=\"w-5 h-5 text-warning\" />\n                </div>\n                <div className=\"text-left\">\n                  <p className=\"font-medium text-foreground\">Behavior Concern</p>\n                  <p className=\"text-xs text-muted-foreground\">Report behavioral issues</p>\n                </div>\n              </div>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {selectedAnimal && (\n        <>\n          <AddNoteDialog\n            open={noteDialogOpen}\n            onOpenChange={setNoteDialogOpen}\n            subjectType=\"animal\"\n            subjectId={selectedAnimal.id}\n            subjectName={selectedAnimal.name}\n          />\n          <AddPhotoDialog\n            open={photoDialogOpen}\n            onOpenChange={setPhotoDialogOpen}\n            subjectType=\"animal\"\n            subjectId={selectedAnimal.id}\n            subjectName={selectedAnimal.name}\n          />\n        </>\n      )}\n    </AppLayout>\n  );\n}\n","size_bytes":9231},"client/src/pages/intake/wizard.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Camera, Upload } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype IntakeFormData = {\n  name: string;\n  species: \"dog\" | \"cat\" | \"other\";\n  breed: string;\n  sex: string;\n  color: string;\n  dobEst: string;\n  microchip: string;\n  description: string;\n  intakeDate: string;\n  status: \"available\" | \"hold\" | \"fostered\" | \"adopted\" | \"transferred\" | \"rto\" | \"euthanized\";\n  attributes: {\n    intakeType?: \"stray\" | \"owner_surrender\" | \"transfer_in\" | \"confiscation\" | \"born_in_care\";\n    intakeSource?: string;\n    intakeNotes?: string;\n  };\n};\n\nexport default function IntakeWizard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [step, setStep] = useState(1);\n  const totalSteps = 4;\n  \n  const [formData, setFormData] = useState<IntakeFormData>({\n    name: \"\",\n    species: \"dog\",\n    breed: \"\",\n    sex: \"\",\n    color: \"\",\n    dobEst: \"\",\n    microchip: \"\",\n    description: \"\",\n    intakeDate: new Date().toISOString().split('T')[0],\n    status: \"available\",\n    attributes: {},\n  });\n\n  const createAnimalMutation = useMutation({\n    mutationFn: async (data: IntakeFormData) => {\n      return await apiRequest(\"/api/v1/animals\", \"POST\", {\n        name: data.name,\n        species: data.species,\n        breed: data.breed || null,\n        sex: data.sex || null,\n        color: data.color || null,\n        dobEst: data.dobEst ? new Date(data.dobEst).toISOString() : null,\n        intakeDate: new Date(data.intakeDate).toISOString(),\n        status: data.status,\n        microchip: data.microchip || null,\n        description: data.description || null,\n        attributes: data.attributes,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/animals\"] });\n      toast({\n        title: \"Success!\",\n        description: \"Animal has been added to the system.\",\n      });\n      setLocation(\"/animals\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create animal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const steps = [\n    { number: 1, title: \"Photo\", description: \"Add animal photo\" },\n    { number: 2, title: \"Basic Info\", description: \"Species, sex, age\" },\n    { number: 3, title: \"Intake Details\", description: \"Source & type\" },\n    { number: 4, title: \"Review\", description: \"Confirm details\" },\n  ];\n\n  const handleInputChange = (field: keyof IntakeFormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleAttributeChange = (key: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      attributes: { ...prev.attributes, [key]: value },\n    }));\n  };\n\n  const canGoNext = () => {\n    if (step === 2) {\n      return formData.name.trim() !== \"\";\n    }\n    return true;\n  };\n\n  const handleSubmit = () => {\n    if (!formData.name.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Animal name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createAnimalMutation.mutate(formData);\n  };\n\n  return (\n    <AppLayout title=\"New Animal Intake\" subtitle=\"Fast intake wizard\">\n      <div className=\"max-w-4xl mx-auto\">\n        <Card>\n          <CardContent className=\"p-6\">\n            {/* Progress Steps */}\n            <div className=\"mb-8\">\n              <div className=\"flex items-center justify-between mb-4\">\n                {steps.map((s, idx) => (\n                  <div key={s.number} className=\"flex items-center flex-1\">\n                    <div className=\"flex items-center\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center font-medium text-sm ${\n                        step >= s.number ? 'bg-primary text-primary-foreground' : 'bg-muted text-muted-foreground'\n                      }`} data-testid={`step-indicator-${s.number}`}>\n                        {s.number}\n                      </div>\n                      {idx < steps.length - 1 && (\n                        <div className={`flex-1 h-1 mx-2 ${\n                          step > s.number ? 'bg-primary' : 'bg-muted'\n                        }`}></div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex justify-between\">\n                {steps.map((s) => (\n                  <div key={s.number} className=\"text-center\" style={{ width: `${100 / steps.length}%` }}>\n                    <p className={`text-xs font-medium ${step >= s.number ? 'text-primary' : 'text-muted-foreground'}`}>\n                      {s.title}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">{s.description}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Step Content */}\n            {step === 1 && (\n              <div data-testid=\"step-photo-upload\">\n                <h2 className=\"text-xl font-semibold text-foreground mb-2\">Upload Animal Photo</h2>\n                <p className=\"text-muted-foreground mb-6\">Add a clear photo of the animal. This will help with identification and adoption listings.</p>\n\n                <div className=\"border-2 border-dashed border-border rounded-xl p-12 text-center bg-muted/30\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Camera className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <p className=\"font-medium text-foreground mb-1\">Photo Upload</p>\n                  <p className=\"text-sm text-muted-foreground\">Photo upload requires storage backend setup. You can add photos after creating the animal record.</p>\n                </div>\n\n                <div className=\"mt-6 text-center\">\n                  <button \n                    className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\" \n                    data-testid=\"button-skip-photo\"\n                    onClick={() => setStep(2)}\n                  >\n                    Continue to animal details →\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {step === 2 && (\n              <div data-testid=\"step-basic-info\">\n                <h2 className=\"text-xl font-semibold text-foreground mb-2\">Basic Information</h2>\n                <p className=\"text-muted-foreground mb-6\">Enter the animal's basic details.</p>\n\n                <div className=\"grid gap-6 md:grid-cols-2\">\n                  <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"name\">Animal Name *</Label>\n                    <Input\n                      id=\"name\"\n                      data-testid=\"input-name\"\n                      placeholder=\"e.g., Buddy\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"species\">Species *</Label>\n                    <Select \n                      value={formData.species} \n                      onValueChange={(value: any) => handleInputChange(\"species\", value)}\n                    >\n                      <SelectTrigger data-testid=\"select-species\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"dog\">Dog</SelectItem>\n                        <SelectItem value=\"cat\">Cat</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"breed\">Breed</Label>\n                    <Input\n                      id=\"breed\"\n                      data-testid=\"input-breed\"\n                      placeholder=\"e.g., Labrador Mix\"\n                      value={formData.breed}\n                      onChange={(e) => handleInputChange(\"breed\", e.target.value)}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"sex\">Sex</Label>\n                    <Select \n                      value={formData.sex} \n                      onValueChange={(value) => handleInputChange(\"sex\", value)}\n                    >\n                      <SelectTrigger data-testid=\"select-sex\">\n                        <SelectValue placeholder=\"Select sex\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"male\">Male</SelectItem>\n                        <SelectItem value=\"female\">Female</SelectItem>\n                        <SelectItem value=\"unknown\">Unknown</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"color\">Color</Label>\n                    <Input\n                      id=\"color\"\n                      data-testid=\"input-color\"\n                      placeholder=\"e.g., Brown/White\"\n                      value={formData.color}\n                      onChange={(e) => handleInputChange(\"color\", e.target.value)}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"dobEst\">Date of Birth (Estimated)</Label>\n                    <Input\n                      id=\"dobEst\"\n                      type=\"date\"\n                      data-testid=\"input-dob\"\n                      value={formData.dobEst}\n                      onChange={(e) => handleInputChange(\"dobEst\", e.target.value)}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"microchip\">Microchip Number</Label>\n                    <Input\n                      id=\"microchip\"\n                      data-testid=\"input-microchip\"\n                      placeholder=\"e.g., 985112345678901\"\n                      value={formData.microchip}\n                      onChange={(e) => handleInputChange(\"microchip\", e.target.value)}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {step === 3 && (\n              <div data-testid=\"step-intake-details\">\n                <h2 className=\"text-xl font-semibold text-foreground mb-2\">Intake Details</h2>\n                <p className=\"text-muted-foreground mb-6\">Provide intake and housing information.</p>\n\n                <div className=\"grid gap-6 md:grid-cols-2\">\n                  <div>\n                    <Label htmlFor=\"intakeDate\">Intake Date</Label>\n                    <Input\n                      id=\"intakeDate\"\n                      type=\"date\"\n                      data-testid=\"input-intake-date\"\n                      value={formData.intakeDate}\n                      onChange={(e) => handleInputChange(\"intakeDate\", e.target.value)}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"intakeType\">Intake Type</Label>\n                    <Select \n                      value={formData.attributes.intakeType || \"\"} \n                      onValueChange={(value) => handleAttributeChange(\"intakeType\", value)}\n                    >\n                      <SelectTrigger data-testid=\"select-intake-type\">\n                        <SelectValue placeholder=\"Select intake type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"stray\">Stray</SelectItem>\n                        <SelectItem value=\"owner_surrender\">Owner Surrender</SelectItem>\n                        <SelectItem value=\"transfer_in\">Transfer In</SelectItem>\n                        <SelectItem value=\"confiscation\">Confiscation</SelectItem>\n                        <SelectItem value=\"born_in_care\">Born in Care</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"intakeSource\">Intake Source</Label>\n                    <Input\n                      id=\"intakeSource\"\n                      data-testid=\"input-intake-source\"\n                      placeholder=\"e.g., City Shelter, Owner Name\"\n                      value={formData.attributes.intakeSource || \"\"}\n                      onChange={(e) => handleAttributeChange(\"intakeSource\", e.target.value)}\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"status\">Initial Status</Label>\n                    <Select \n                      value={formData.status} \n                      onValueChange={(value: any) => handleInputChange(\"status\", value)}\n                    >\n                      <SelectTrigger data-testid=\"select-status\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"available\">Available</SelectItem>\n                        <SelectItem value=\"hold\">Hold</SelectItem>\n                        <SelectItem value=\"fostered\">Fostered</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"description\">Description / Notes</Label>\n                    <Textarea\n                      id=\"description\"\n                      data-testid=\"input-description\"\n                      placeholder=\"Behavioral notes, medical history, temperament...\"\n                      rows={4}\n                      value={formData.description}\n                      onChange={(e) => handleInputChange(\"description\", e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"intakeNotes\">Intake-Specific Notes</Label>\n                    <Textarea\n                      id=\"intakeNotes\"\n                      data-testid=\"input-intake-notes\"\n                      placeholder=\"Circumstances of intake, special considerations...\"\n                      rows={3}\n                      value={formData.attributes.intakeNotes || \"\"}\n                      onChange={(e) => handleAttributeChange(\"intakeNotes\", e.target.value)}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {step === 4 && (\n              <div data-testid=\"step-review\">\n                <h2 className=\"text-xl font-semibold text-foreground mb-2\">Review & Submit</h2>\n                <p className=\"text-muted-foreground mb-6\">Please review the information before submitting.</p>\n\n                <div className=\"bg-muted/30 rounded-lg p-6 space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Name</p>\n                      <p className=\"font-medium\" data-testid=\"text-review-name\">{formData.name || \"—\"}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Species</p>\n                      <p className=\"font-medium capitalize\" data-testid=\"text-review-species\">{formData.species}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Breed</p>\n                      <p className=\"font-medium\" data-testid=\"text-review-breed\">{formData.breed || \"—\"}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Sex</p>\n                      <p className=\"font-medium capitalize\" data-testid=\"text-review-sex\">{formData.sex || \"—\"}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Color</p>\n                      <p className=\"font-medium\" data-testid=\"text-review-color\">{formData.color || \"—\"}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Status</p>\n                      <p className=\"font-medium capitalize\" data-testid=\"text-review-status\">{formData.status}</p>\n                    </div>\n                    {formData.attributes.intakeType && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Intake Type</p>\n                        <p className=\"font-medium capitalize\" data-testid=\"text-review-intake-type\">\n                          {formData.attributes.intakeType.replace(/_/g, ' ')}\n                        </p>\n                      </div>\n                    )}\n                    {formData.attributes.intakeSource && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Intake Source</p>\n                        <p className=\"font-medium\" data-testid=\"text-review-intake-source\">{formData.attributes.intakeSource}</p>\n                      </div>\n                    )}\n                    {formData.microchip && (\n                      <div className=\"col-span-2\">\n                        <p className=\"text-sm text-muted-foreground\">Microchip</p>\n                        <p className=\"font-medium\" data-testid=\"text-review-microchip\">{formData.microchip}</p>\n                      </div>\n                    )}\n                    {formData.description && (\n                      <div className=\"col-span-2\">\n                        <p className=\"text-sm text-muted-foreground\">Description</p>\n                        <p className=\"text-sm\" data-testid=\"text-review-description\">{formData.description}</p>\n                      </div>\n                    )}\n                    {formData.attributes.intakeNotes && (\n                      <div className=\"col-span-2\">\n                        <p className=\"text-sm text-muted-foreground\">Intake Notes</p>\n                        <p className=\"text-sm\" data-testid=\"text-review-intake-notes\">{formData.attributes.intakeNotes}</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"mt-6 p-4 bg-primary/10 border border-primary/20 rounded-lg\">\n                  <p className=\"text-sm text-foreground\">\n                    By submitting this form, you confirm that all information is accurate to the best of your knowledge.\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"mt-8 flex items-center justify-between pt-6 border-t border-border\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => setStep(Math.max(1, step - 1))}\n                disabled={step === 1}\n                data-testid=\"button-previous\"\n              >\n                ← Previous\n              </Button>\n              <div className=\"flex gap-3\">\n                <Button \n                  variant=\"outline\" \n                  data-testid=\"button-cancel\"\n                  onClick={() => setLocation(\"/animals\")}\n                >\n                  Cancel\n                </Button>\n                {step < totalSteps ? (\n                  <Button \n                    onClick={() => setStep(Math.min(totalSteps, step + 1))}\n                    disabled={!canGoNext()}\n                    data-testid=\"button-next\"\n                  >\n                    Next Step →\n                  </Button>\n                ) : (\n                  <Button \n                    onClick={handleSubmit}\n                    disabled={createAnimalMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {createAnimalMutation.isPending ? \"Creating...\" : \"Create Animal\"}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Batch Intake Option */}\n        <div className=\"mt-6 bg-secondary/10 border border-secondary/30 rounded-xl p-6\">\n          <div className=\"flex items-start gap-4\">\n            <div className=\"w-12 h-12 rounded-lg bg-secondary/20 flex items-center justify-center flex-shrink-0\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-6 h-6 text-secondary-foreground\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M15 19.128a9.38 9.38 0 0 0 2.625.372 9.337 9.337 0 0 0 4.121-.952 4.125 4.125 0 0 0-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 0 1 8.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0 1 11.964-3.07M12 6.375a3.375 3.375 0 1 1-6.75 0 3.375 3.375 0 0 1 6.75 0Zm8.25 2.25a2.625 2.625 0 1 1-5.25 0 2.625 2.625 0 0 1 5.25 0Z\" />\n              </svg>\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-foreground mb-1\">Batch Intake Available</h3>\n              <p className=\"text-sm text-muted-foreground mb-3\">Intaking multiple animals at once? Use batch mode to share common fields and speed up the process.</p>\n              <Button variant=\"secondary\" size=\"sm\" data-testid=\"button-batch-mode\" disabled>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth=\"2\" stroke=\"currentColor\" className=\"w-4 h-4 mr-2\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M6.429 9.75 2.25 12l4.179 2.25m0-4.5 5.571 3 5.571-3m-11.142 0L2.25 7.5 12 2.25l9.75 5.25-4.179 2.25m0 0L21.75 12l-4.179 2.25m0 0 4.179 2.25L12 21.75 2.25 16.5l4.179-2.25m11.142 0-5.571 3-5.571-3\" />\n                </svg>\n                Coming Soon\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":22771},"client/src/pages/medical/index.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { medicalApi } from \"@/lib/api\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, CheckCircle, Plus, ListChecks } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function MedicalIndex() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [selectedTasks, setSelectedTasks] = useState<Set<string>>(new Set());\n  \n  const { data: tasks = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/v1/medical/schedule\"],\n  });\n\n  const updateTaskMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: any }) => medicalApi.updateTask(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/medical/schedule\"] });\n      toast({\n        title: \"Task updated\",\n        description: \"Medical task has been marked as complete\",\n      });\n    },\n  });\n\n  const batchUpdateMutation = useMutation({\n    mutationFn: async ({ taskIds, updates }: { taskIds: string[], updates: any }) => {\n      return await apiRequest(\"/api/v1/medical/schedule/batch\", \"POST\", { taskIds, updates });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/medical/schedule\"] });\n      setSelectedTasks(new Set());\n      toast({\n        title: \"Tasks updated\",\n        description: `${data.updated} tasks have been marked as complete`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update tasks\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMarkDone = (taskId: string) => {\n    updateTaskMutation.mutate({ id: taskId, data: { status: 'done' } });\n  };\n\n  const handleToggleTask = (taskId: string) => {\n    const newSelected = new Set(selectedTasks);\n    if (newSelected.has(taskId)) {\n      newSelected.delete(taskId);\n    } else {\n      newSelected.add(taskId);\n    }\n    setSelectedTasks(newSelected);\n  };\n\n  const handleSelectAllOverdue = () => {\n    const overdueIds = overdueTasks.map((t: any) => t.id);\n    const newSelected = new Set(selectedTasks);\n    overdueIds.forEach(id => newSelected.add(id));\n    setSelectedTasks(newSelected);\n  };\n\n  const handleSelectAllToday = () => {\n    const todayIds = todayTasks.map((t: any) => t.id);\n    const newSelected = new Set(selectedTasks);\n    todayIds.forEach(id => newSelected.add(id));\n    setSelectedTasks(newSelected);\n  };\n\n  const handleBatchMarkDone = () => {\n    if (selectedTasks.size === 0) {\n      toast({\n        title: \"No tasks selected\",\n        description: \"Please select at least one task to mark as done\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    batchUpdateMutation.mutate({\n      taskIds: Array.from(selectedTasks),\n      updates: { status: 'done' },\n    });\n  };\n\n  const now = new Date();\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  \n  const overdueTasks = tasks.filter((t: any) => \n    t.status === 'scheduled' && new Date(t.dueDate) < today\n  );\n  \n  const todayTasks = tasks.filter((t: any) => {\n    const dueDate = new Date(t.dueDate);\n    return t.status === 'scheduled' && \n           dueDate.getDate() === today.getDate() &&\n           dueDate.getMonth() === today.getMonth() &&\n           dueDate.getFullYear() === today.getFullYear();\n  });\n\n  return (\n    <AppLayout \n      title=\"Medical Schedule\" \n      subtitle={`${tasks.length} tasks • ${overdueTasks.length} overdue`}\n    >\n      <Card className=\"mb-6\">\n        <CardHeader className=\"border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex gap-3\">\n              <Select defaultValue=\"today\">\n                <SelectTrigger className=\"w-[180px]\" data-testid=\"select-date-filter\">\n                  <SelectValue placeholder=\"All Dates\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Dates</SelectItem>\n                  <SelectItem value=\"today\">Today</SelectItem>\n                  <SelectItem value=\"overdue\">Overdue</SelectItem>\n                  <SelectItem value=\"week\">This Week</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select defaultValue=\"all-types\">\n                <SelectTrigger className=\"w-[180px]\" data-testid=\"select-type-filter\">\n                  <SelectValue placeholder=\"All Types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all-types\">All Types</SelectItem>\n                  <SelectItem value=\"vaccine\">Vaccines</SelectItem>\n                  <SelectItem value=\"treatment\">Treatments</SelectItem>\n                  <SelectItem value=\"exam\">Exams</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex gap-2\">\n              {selectedTasks.size > 0 && (\n                <Button \n                  variant=\"default\" \n                  size=\"sm\" \n                  data-testid=\"button-batch-mark-done\"\n                  onClick={handleBatchMarkDone}\n                  disabled={batchUpdateMutation.isPending}\n                >\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Mark {selectedTasks.size} as Done\n                </Button>\n              )}\n              <Button size=\"sm\" data-testid=\"button-add-task\" disabled>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Task\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {isLoading ? (\n        <div className=\"text-center py-12\" data-testid=\"loading-tasks\">\n          <div className=\"inline-block w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          {/* Overdue Section */}\n          {overdueTasks.length > 0 && (\n            <Card className=\"border-destructive/50\" data-testid=\"section-overdue\">\n              <CardHeader className=\"bg-destructive/5 border-b border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-semibold text-destructive flex items-center gap-2\">\n                    <AlertTriangle className=\"w-5 h-5\" />\n                    Overdue ({overdueTasks.length})\n                  </h3>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"text-destructive border-destructive\" \n                    data-testid=\"button-select-all-overdue\"\n                    onClick={handleSelectAllOverdue}\n                  >\n                    Select All\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"divide-y divide-border\">\n                  {overdueTasks.map((task: any) => (\n                    <div key={task.id} className=\"p-4 hover:bg-accent/50 transition-colors\" data-testid={`task-overdue-${task.id}`}>\n                      <div className=\"flex items-start gap-4\">\n                        <input \n                          type=\"checkbox\" \n                          className=\"mt-1 w-5 h-5 rounded border-input text-primary cursor-pointer\" \n                          data-testid={`checkbox-${task.id}`}\n                          checked={selectedTasks.has(task.id)}\n                          onChange={() => handleToggleTask(task.id)}\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div>\n                              <p className=\"font-medium text-foreground\" data-testid={`text-animal-${task.animal?.name}`}>\n                                {task.animal?.name || 'Unknown'}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\">{task.type} - {task.notes}</p>\n                            </div>\n                            <Badge variant=\"destructive\" data-testid={`badge-overdue-${task.id}`}>\n                              Overdue\n                            </Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-reschedule-${task.id}`}>\n                            Reschedule\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            className=\"bg-success hover:bg-success/90\"\n                            onClick={() => handleMarkDone(task.id)}\n                            data-testid={`button-done-${task.id}`}\n                          >\n                            Mark Done\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Today's Tasks */}\n          <Card data-testid=\"section-today\">\n            <CardHeader className=\"border-b border-border\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n                  <CheckCircle className=\"w-5 h-5 text-success\" />\n                  Due Today ({todayTasks.length})\n                </h3>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  data-testid=\"button-select-all-today\"\n                  onClick={handleSelectAllToday}\n                >\n                  Select All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {todayTasks.length === 0 ? (\n                <div className=\"p-8 text-center text-muted-foreground\" data-testid=\"empty-today\">\n                  <CheckCircle className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                  <p>No tasks due today</p>\n                </div>\n              ) : (\n                <div className=\"divide-y divide-border\">\n                  {todayTasks.map((task: any) => (\n                    <div key={task.id} className=\"p-4 hover:bg-accent/50 transition-colors\" data-testid={`task-today-${task.id}`}>\n                      <div className=\"flex items-start gap-4\">\n                        <input \n                          type=\"checkbox\" \n                          className=\"mt-1 w-5 h-5 rounded border-input text-primary cursor-pointer\" \n                          data-testid={`checkbox-today-${task.id}`}\n                          checked={selectedTasks.has(task.id)}\n                          onChange={() => handleToggleTask(task.id)}\n                        />\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div>\n                              <p className=\"font-medium text-foreground\">{task.animal?.name || 'Unknown'}</p>\n                              <p className=\"text-sm text-muted-foreground\">{task.type} - {task.notes}</p>\n                            </div>\n                            <Badge className=\"bg-success/10 text-success\">Due today</Badge>\n                          </div>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\">Reschedule</Button>\n                          <Button \n                            size=\"sm\" \n                            className=\"bg-success hover:bg-success/90\"\n                            onClick={() => handleMarkDone(task.id)}\n                          >\n                            Mark Done\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </AppLayout>\n  );\n}\n","size_bytes":12670},"client/src/pages/reports/index.tsx":{"content":"import { useState } from \"react\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MetricCard } from \"@/components/ui/metric-card\";\nimport { TrendingUp, Clock, Heart, Activity, BarChart3, FileText, Download, Loader2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ReportMetrics {\n  liveReleaseRate: string;\n  avgLengthOfStay: string;\n  totalAdoptionsThisMonth: number;\n  medicalCompliance: string;\n}\n\nexport default function ReportsIndex() {\n  const [entityType, setEntityType] = useState(\"animals\");\n  const [isExporting, setIsExporting] = useState(false);\n  const { toast } = useToast();\n  \n  const { data: metrics, isLoading } = useQuery<ReportMetrics>({\n    queryKey: [\"/api/v1/reports/metrics\"],\n  });\n\n  const handleExport = async () => {\n    try {\n      setIsExporting(true);\n      const response = await fetch(`/api/v1/reports/export/csv?entity=${entityType}`, {\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Export failed');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${entityType}_${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: `${entityType} exported successfully`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to export data\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return (\n    <AppLayout title=\"Reports & Analytics\" subtitle=\"Track outcomes, compliance, and key metrics\">\n      {/* Quick Stats */}\n      {isLoading ? (\n        <div className=\"flex justify-center items-center py-12 mb-6\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n        </div>\n      ) : (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6\">\n          <MetricCard\n            title=\"Live Release Rate\"\n            value={metrics?.liveReleaseRate || \"0.0%\"}\n            icon={TrendingUp}\n            iconColor=\"text-success\"\n            trend={{ value: \"Adoptions, transfers, RTOs\" }}\n            testId=\"metric-release-rate\"\n          />\n          <MetricCard\n            title=\"Avg Length of Stay\"\n            value={metrics?.avgLengthOfStay || \"0 days\"}\n            icon={Clock}\n            iconColor=\"text-primary\"\n            trend={{ value: \"From intake to outcome\" }}\n            testId=\"metric-los\"\n          />\n          <MetricCard\n            title=\"Total Adoptions\"\n            value={metrics?.totalAdoptionsThisMonth?.toString() || \"0\"}\n            icon={Heart}\n            iconColor=\"text-destructive\"\n            trend={{ value: \"This month\" }}\n            testId=\"metric-adoptions\"\n          />\n          <MetricCard\n            title=\"Medical Compliance\"\n            value={metrics?.medicalCompliance || \"100.0%\"}\n            icon={Activity}\n            iconColor=\"text-warning\"\n            trend={{ value: \"Tasks completed\" }}\n            testId=\"metric-compliance\"\n          />\n        </div>\n      )}\n\n      {/* Canned Reports */}\n      <Card className=\"mb-6\" data-testid=\"card-canned-reports\">\n        <CardHeader>\n          <CardTitle>Quick Reports</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid lg:grid-cols-2 gap-3\">\n            <Button \n              variant=\"outline\" \n              className=\"h-auto p-4 justify-start\"\n              data-testid=\"button-report-intake-outcomes\"\n            >\n              <div className=\"flex items-center space-x-3 w-full\">\n                <div className=\"w-10 h-10 bg-success/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <BarChart3 className=\"w-5 h-5 text-success\" />\n                </div>\n                <div className=\"text-left flex-1\">\n                  <p className=\"font-medium text-foreground\">Monthly Intake/Outcomes</p>\n                  <p className=\"text-xs text-muted-foreground\">View intake sources and outcomes</p>\n                </div>\n                <Download className=\"w-5 h-5 text-muted-foreground\" />\n              </div>\n            </Button>\n\n            <Button \n              variant=\"outline\" \n              className=\"h-auto p-4 justify-start\"\n              data-testid=\"button-report-los\"\n            >\n              <div className=\"flex items-center space-x-3 w-full\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Clock className=\"w-5 h-5 text-primary\" />\n                </div>\n                <div className=\"text-left flex-1\">\n                  <p className=\"font-medium text-foreground\">Length of Stay Analysis</p>\n                  <p className=\"text-xs text-muted-foreground\">Average and breakdown by species</p>\n                </div>\n                <Download className=\"w-5 h-5 text-muted-foreground\" />\n              </div>\n            </Button>\n\n            <Button \n              variant=\"outline\" \n              className=\"h-auto p-4 justify-start\"\n              data-testid=\"button-report-medical\"\n            >\n              <div className=\"flex items-center space-x-3 w-full\">\n                <div className=\"w-10 h-10 bg-warning/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Activity className=\"w-5 h-5 text-warning\" />\n                </div>\n                <div className=\"text-left flex-1\">\n                  <p className=\"font-medium text-foreground\">Medical Compliance</p>\n                  <p className=\"text-xs text-muted-foreground\">Vaccine and treatment completion</p>\n                </div>\n                <Download className=\"w-5 h-5 text-muted-foreground\" />\n              </div>\n            </Button>\n\n            <Button \n              variant=\"outline\" \n              className=\"h-auto p-4 justify-start\"\n              data-testid=\"button-report-foster\"\n            >\n              <div className=\"flex items-center space-x-3 w-full\">\n                <div className=\"w-10 h-10 bg-secondary/20 rounded-lg flex items-center justify-center flex-shrink-0\">\n                  <Heart className=\"w-5 h-5 text-secondary-foreground\" />\n                </div>\n                <div className=\"text-left flex-1\">\n                  <p className=\"font-medium text-foreground\">Foster Utilization</p>\n                  <p className=\"text-xs text-muted-foreground\">Foster capacity and activity</p>\n                </div>\n                <Download className=\"w-5 h-5 text-muted-foreground\" />\n              </div>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Custom Report Builder */}\n      <Card data-testid=\"card-custom-reports\">\n        <CardHeader>\n          <CardTitle>Custom Report Builder</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"grid lg:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Date Range</label>\n                <Select defaultValue=\"last-30\">\n                  <SelectTrigger data-testid=\"select-date-range\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"last-30\">Last 30 days</SelectItem>\n                    <SelectItem value=\"last-90\">Last 90 days</SelectItem>\n                    <SelectItem value=\"this-year\">This year</SelectItem>\n                    <SelectItem value=\"custom\">Custom range</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Entity Type</label>\n                <Select value={entityType} onValueChange={setEntityType}>\n                  <SelectTrigger data-testid=\"select-entity\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"animals\">Animals</SelectItem>\n                    <SelectItem value=\"people\">People</SelectItem>\n                    <SelectItem value=\"adoptions\">Adoptions</SelectItem>\n                    <SelectItem value=\"medical\">Medical Records</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-foreground mb-2\">Export Format</label>\n                <Select defaultValue=\"csv\">\n                  <SelectTrigger data-testid=\"select-format\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"csv\">CSV</SelectItem>\n                    <SelectItem value=\"excel\">Excel</SelectItem>\n                    <SelectItem value=\"pdf\">PDF</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-foreground mb-2\">Columns to Include</label>\n              <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-2\">\n                {['ID', 'Name', 'Species', 'Status', 'Intake Date', 'Outcome Date', 'Location', 'Medical Status'].map((col) => (\n                  <label key={col} className=\"flex items-center\" data-testid={`checkbox-col-${col.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    <input \n                      type=\"checkbox\" \n                      defaultChecked={['ID', 'Name', 'Species', 'Status'].includes(col)}\n                      className=\"w-4 h-4 text-primary border-input rounded focus:ring-ring mr-2\"\n                    />\n                    <span className=\"text-sm text-foreground\">{col}</span>\n                  </label>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={handleExport} \n                disabled={isExporting}\n                data-testid=\"button-generate-report\"\n              >\n                {isExporting ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : <FileText className=\"w-4 h-4 mr-2\" />}\n                {isExporting ? 'Exporting...' : 'Generate Report'}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </AppLayout>\n  );\n}\n","size_bytes":10984},"client/src/pages/settings/index.tsx":{"content":"import AppLayout from \"@/components/layout/app-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Settings, Building, Users, Key, Database } from \"lucide-react\";\n\nexport default function SettingsIndex() {\n  return (\n    <AppLayout title=\"Settings\" subtitle=\"Manage your organization settings\">\n      <Tabs defaultValue=\"organization\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"organization\" data-testid=\"tab-organization\">\n            <Building className=\"w-4 h-4 mr-2\" />\n            Organization\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n            <Users className=\"w-4 h-4 mr-2\" />\n            Users & Roles\n          </TabsTrigger>\n          <TabsTrigger value=\"integrations\" data-testid=\"tab-integrations\">\n            <Key className=\"w-4 h-4 mr-2\" />\n            Integrations\n          </TabsTrigger>\n          <TabsTrigger value=\"data\" data-testid=\"tab-data\">\n            <Database className=\"w-4 h-4 mr-2\" />\n            Data\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"organization\" className=\"mt-6\">\n          <Card data-testid=\"card-org-profile\">\n            <CardHeader>\n              <CardTitle>Organization Profile</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"org-name\">Organization Name</Label>\n                <Input id=\"org-name\" defaultValue=\"4Paws Demo Shelter\" data-testid=\"input-org-name\" />\n              </div>\n              <div>\n                <Label htmlFor=\"org-address\">Address</Label>\n                <Input id=\"org-address\" defaultValue=\"123 Shelter Lane, Pet City, PC 12345\" data-testid=\"input-org-address\" />\n              </div>\n              <div>\n                <Label htmlFor=\"org-phone\">Phone</Label>\n                <Input id=\"org-phone\" type=\"tel\" placeholder=\"(555) 123-4567\" data-testid=\"input-org-phone\" />\n              </div>\n              <div>\n                <Label htmlFor=\"org-email\">Email</Label>\n                <Input id=\"org-email\" type=\"email\" placeholder=\"info@shelter.org\" data-testid=\"input-org-email\" />\n              </div>\n              <Button data-testid=\"button-save-org\">Save Changes</Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"users\" className=\"mt-6\">\n          <Card data-testid=\"card-users\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Users & Permissions</CardTitle>\n                <Button data-testid=\"button-add-user\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Add User\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Users className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>User management coming soon</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"integrations\" className=\"mt-6\">\n          <Card data-testid=\"card-integrations\">\n            <CardHeader>\n              <CardTitle>External Integrations</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-4 border border-border rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium text-foreground\">Petfinder Feed</h4>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-configure-petfinder\">\n                    Configure\n                  </Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Export available animals to Petfinder automatically\n                </p>\n              </div>\n              <div className=\"p-4 border border-border rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium text-foreground\">Stripe Payments</h4>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-configure-stripe\">\n                    Configure\n                  </Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Process adoption fees and donations\n                </p>\n              </div>\n              <div className=\"p-4 border border-border rounded-lg\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium text-foreground\">Microchip Registry</h4>\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-configure-microchip\">\n                    Configure\n                  </Button>\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  Auto-register microchips on adoption\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"data\" className=\"mt-6\">\n          <Card data-testid=\"card-data\">\n            <CardHeader>\n              <CardTitle>Data Management</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-4 border border-border rounded-lg\">\n                <h4 className=\"font-medium text-foreground mb-2\">Import Data</h4>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Import animals, people, or other records from CSV\n                </p>\n                <Button variant=\"outline\" data-testid=\"button-import-data\">\n                  <Database className=\"w-4 h-4 mr-2\" />\n                  Import CSV\n                </Button>\n              </div>\n              <div className=\"p-4 border border-border rounded-lg\">\n                <h4 className=\"font-medium text-foreground mb-2\">Export Data</h4>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Export all organization data for backup or migration\n                </p>\n                <Button variant=\"outline\" data-testid=\"button-export-data\">\n                  <Database className=\"w-4 h-4 mr-2\" />\n                  Export All Data\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </AppLayout>\n  );\n}\n","size_bytes":6811},"client/src/pages/volunteers/portal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/app-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Camera, Check, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { AddPhotoDialog } from \"@/components/dialogs/add-photo-dialog\";\n\nexport default function VolunteerPortal() {\n  const [selectedLocation, setSelectedLocation] = useState(\"main-shelter-dogs\");\n  const [photoDialogOpen, setPhotoDialogOpen] = useState(false);\n  const [selectedAnimal, setSelectedAnimal] = useState<any>(null);\n  const [notes, setNotes] = useState<Record<string, string>>({});\n  const [urgent, setUrgent] = useState<Record<string, boolean>>({});\n  const [activityPending, setActivityPending] = useState<Record<string, boolean>>({});\n  const [notePending, setNotePending] = useState<Record<string, boolean>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: allAnimals = [], isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/v1/animals\"],\n  });\n\n  const animals = allAnimals.filter((a: any) => \n    a.status === 'available' || a.status === 'medical' || a.status === 'fostered'\n  ).slice(0, 10);\n\n  const logActivityMutation = useMutation({\n    mutationFn: async (data: { animalId: string; activity: string; animalName: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/v1/notes\", {\n        subjectType: \"animal\",\n        subjectId: data.animalId,\n        body: `Volunteer activity: ${data.activity}`,\n        visibility: \"staff_only\",\n        tags: [data.activity, \"volunteer_activity\"],\n      });\n      return res.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/notes\", \"animal\", variables.animalId] });\n      setActivityPending(prev => ({ ...prev, [variables.animalId]: false }));\n      toast({\n        title: \"Activity Logged\",\n        description: `${variables.activity} logged for ${variables.animalName}`,\n      });\n    },\n    onError: (error, variables) => {\n      setActivityPending(prev => ({ ...prev, [variables.animalId]: false }));\n      toast({\n        title: \"Error\",\n        description: (error as any).message || \"Failed to log activity\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveNoteMutation = useMutation({\n    mutationFn: async (data: { animalId: string; note: string; tags: string[] }) => {\n      const res = await apiRequest(\"POST\", \"/api/v1/notes\", {\n        subjectType: \"animal\",\n        subjectId: data.animalId,\n        body: data.note,\n        visibility: \"staff_only\",\n        tags: data.tags,\n      });\n      return res.json();\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/notes\", \"animal\", variables.animalId] });\n      setNotePending(prev => ({ ...prev, [variables.animalId]: false }));\n      toast({\n        title: \"Note Saved\",\n        description: \"Your note has been saved successfully\",\n      });\n      setNotes((prev) => ({ ...prev, [variables.animalId]: \"\" }));\n      setUrgent((prev) => ({ ...prev, [variables.animalId]: false }));\n    },\n    onError: (error, variables) => {\n      setNotePending(prev => ({ ...prev, [variables.animalId]: false }));\n      toast({\n        title: \"Error\",\n        description: (error as any).message || \"Failed to save note\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleActivity = (animalId: string, animalName: string, activity: string) => {\n    setActivityPending(prev => ({ ...prev, [animalId]: true }));\n    logActivityMutation.mutate({ animalId, animalName, activity });\n  };\n\n  const handleSaveNote = (animalId: string) => {\n    const noteText = notes[animalId];\n    if (!noteText || !noteText.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a note before saving\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    const tags = [\"volunteer_note\"];\n    if (urgent[animalId]) {\n      tags.push(\"urgent\");\n    }\n    setNotePending(prev => ({ ...prev, [animalId]: true }));\n    saveNoteMutation.mutate({ animalId, note: noteText, tags });\n  };\n\n  const handleAddPhoto = (animal: any) => {\n    setSelectedAnimal(animal);\n    setPhotoDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return (\n      <AppLayout title=\"Volunteer Check-In\" subtitle=\"Loading...\">\n        <div className=\"flex items-center justify-center p-8\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-primary\" />\n        </div>\n      </AppLayout>\n    );\n  }\n\n  return (\n    <AppLayout title=\"Volunteer Check-In\" subtitle=\"Log your activities and help us track animal care\">\n      {/* Location Selection */}\n      <Card className=\"mb-6\" data-testid=\"card-location\">\n        <CardContent className=\"p-6\">\n          <label className=\"block text-sm font-medium text-foreground mb-2\">Select Your Location</label>\n          <Select value={selectedLocation} onValueChange={setSelectedLocation}>\n            <SelectTrigger className=\"w-full\" data-testid=\"select-location\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"main-shelter-dogs\">Main Shelter - Dog Area</SelectItem>\n              <SelectItem value=\"main-shelter-cats\">Main Shelter - Cat Area</SelectItem>\n              <SelectItem value=\"main-shelter-small\">Main Shelter - Small Animals</SelectItem>\n              <SelectItem value=\"clinic\">Clinic</SelectItem>\n            </SelectContent>\n          </Select>\n        </CardContent>\n      </Card>\n\n      {/* Animals at Location */}\n      <Card data-testid=\"card-animals\">\n        <CardHeader className=\"border-b border-border\">\n          <CardTitle>Animals at This Location ({animals.length})</CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <div className=\"divide-y divide-border\">\n            {animals.map((animal: any) => (\n              <div \n                key={animal.id} \n                className=\"p-4 hover:bg-accent/50 transition-colors\"\n                data-testid={`animal-item-${animal.id}`}\n              >\n                <div className=\"flex items-center gap-4 mb-4\">\n                  <div className=\"w-16 h-16 rounded-lg bg-muted flex items-center justify-center\">\n                    <span className=\"text-3xl\">🐕</span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-semibold text-foreground\" data-testid={`text-animal-name-${animal.name}`}>\n                      {animal.name}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {animal.breed} • {animal.sex}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Quick Actions */}\n                <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2 mb-3\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full\"\n                    data-testid={`button-walked-${animal.id}`}\n                    onClick={() => handleActivity(animal.id, animal.name, \"walked\")}\n                    disabled={activityPending[animal.id]}\n                  >\n                    {activityPending[animal.id] ? <Loader2 className=\"w-4 h-4 mr-1 animate-spin\" /> : <Check className=\"w-4 h-4 mr-1\" />}\n                    Walked\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full\"\n                    data-testid={`button-fed-${animal.id}`}\n                    onClick={() => handleActivity(animal.id, animal.name, \"fed\")}\n                    disabled={activityPending[animal.id]}\n                  >\n                    {activityPending[animal.id] ? <Loader2 className=\"w-4 h-4 mr-1 animate-spin\" /> : <Check className=\"w-4 h-4 mr-1\" />}\n                    Fed\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full\"\n                    data-testid={`button-play-${animal.id}`}\n                    onClick={() => handleActivity(animal.id, animal.name, \"play\")}\n                    disabled={activityPending[animal.id]}\n                  >\n                    {activityPending[animal.id] ? <Loader2 className=\"w-4 h-4 mr-1 animate-spin\" /> : <Check className=\"w-4 h-4 mr-1\" />}\n                    Play\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"w-full\"\n                    data-testid={`button-photo-${animal.id}`}\n                    onClick={() => handleAddPhoto(animal)}\n                  >\n                    <Camera className=\"w-4 h-4 mr-1\" />\n                    Photo\n                  </Button>\n                </div>\n\n                {/* Note Section */}\n                <div>\n                  <Textarea\n                    placeholder=\"Add a note about behavior, health, or anything else...\"\n                    className=\"mb-2\"\n                    rows={2}\n                    data-testid={`textarea-note-${animal.id}`}\n                    value={notes[animal.id] || \"\"}\n                    onChange={(e) => setNotes((prev) => ({ ...prev, [animal.id]: e.target.value }))}\n                  />\n                  <div className=\"flex justify-between items-center\">\n                    <label className=\"flex items-center text-sm text-muted-foreground cursor-pointer\">\n                      <input \n                        type=\"checkbox\" \n                        className=\"w-4 h-4 rounded border-input text-primary mr-2\"\n                        data-testid={`checkbox-urgent-${animal.id}`}\n                        checked={urgent[animal.id] || false}\n                        onChange={(e) => setUrgent((prev) => ({ ...prev, [animal.id]: e.target.checked }))}\n                      />\n                      Flag as urgent\n                    </label>\n                    <Button \n                      size=\"sm\"\n                      data-testid={`button-save-note-${animal.id}`}\n                      onClick={() => handleSaveNote(animal.id)}\n                      disabled={notePending[animal.id]}\n                    >\n                      {notePending[animal.id] && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                      Save Note\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* QR Code Info */}\n      <Card className=\"mt-6 bg-accent/50 border-accent\" data-testid=\"card-qr-info\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-start gap-4\">\n            <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n              <Camera className=\"w-6 h-6 text-primary\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground mb-1\">QR Code Quick Access</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Look for QR codes on kennel cards to quickly log activities for specific animals without searching.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {selectedAnimal && (\n        <AddPhotoDialog\n          open={photoDialogOpen}\n          onOpenChange={setPhotoDialogOpen}\n          subjectType=\"animal\"\n          subjectId={selectedAnimal.id}\n          subjectName={selectedAnimal.name}\n        />\n      )}\n    </AppLayout>\n  );\n}\n","size_bytes":12076},"client/src/components/dialogs/add-note-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface AddNoteDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  subjectType: string;\n  subjectId: string;\n  subjectName?: string;\n}\n\nexport function AddNoteDialog({ open, onOpenChange, subjectType, subjectId, subjectName }: AddNoteDialogProps) {\n  const [noteBody, setNoteBody] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createNoteMutation = useMutation({\n    mutationFn: async (data: { subjectType: string; subjectId: string; body: string; visibility: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/v1/notes\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/notes\", subjectType, subjectId] });\n      toast({\n        title: \"Success\",\n        description: \"Note added successfully\",\n      });\n      setNoteBody(\"\");\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add note\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!noteBody.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a note\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createNoteMutation.mutate({\n      subjectType,\n      subjectId,\n      body: noteBody,\n      visibility: \"public_to_portal\",\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent data-testid=\"dialog-add-note\">\n        <DialogHeader>\n          <DialogTitle>Add Note</DialogTitle>\n          <DialogDescription>\n            Add a note {subjectName ? `for ${subjectName}` : ''}\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"note-body\">Note</Label>\n            <Textarea\n              id=\"note-body\"\n              data-testid=\"textarea-note-body\"\n              value={noteBody}\n              onChange={(e) => setNoteBody(e.target.value)}\n              placeholder=\"Enter your note here...\"\n              rows={5}\n              className=\"mt-1\"\n            />\n          </div>\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createNoteMutation.isPending}\n              data-testid=\"button-submit-note\"\n            >\n              {createNoteMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n              Add Note\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3443},"client/src/components/dialogs/add-photo-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface AddPhotoDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  subjectType: string;\n  subjectId: string;\n  subjectName?: string;\n}\n\nexport function AddPhotoDialog({ open, onOpenChange, subjectType, subjectId, subjectName }: AddPhotoDialogProps) {\n  const [photoUrl, setPhotoUrl] = useState(\"\");\n  const [caption, setCaption] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const createPhotoMutation = useMutation({\n    mutationFn: async (data: { subjectType: string; subjectId: string; url: string; caption?: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/v1/photos\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/photos\", subjectType, subjectId] });\n      toast({\n        title: \"Success\",\n        description: \"Photo added successfully\",\n      });\n      setPhotoUrl(\"\");\n      setCaption(\"\");\n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add photo\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!photoUrl.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a photo URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    createPhotoMutation.mutate({\n      subjectType,\n      subjectId,\n      url: photoUrl,\n      caption: caption || undefined,\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent data-testid=\"dialog-add-photo\">\n        <DialogHeader>\n          <DialogTitle>Add Photo</DialogTitle>\n          <DialogDescription>\n            Add a photo {subjectName ? `for ${subjectName}` : ''}\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"photo-url\">Photo URL</Label>\n            <Input\n              id=\"photo-url\"\n              data-testid=\"input-photo-url\"\n              type=\"url\"\n              value={photoUrl}\n              onChange={(e) => setPhotoUrl(e.target.value)}\n              placeholder=\"https://example.com/photo.jpg\"\n              className=\"mt-1\"\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Upload your photo to a service like Imgur or Google Photos and paste the direct link here\n            </p>\n          </div>\n          <div>\n            <Label htmlFor=\"photo-caption\">Caption (optional)</Label>\n            <Textarea\n              id=\"photo-caption\"\n              data-testid=\"textarea-photo-caption\"\n              value={caption}\n              onChange={(e) => setCaption(e.target.value)}\n              placeholder=\"Add a caption for this photo...\"\n              rows={3}\n              className=\"mt-1\"\n            />\n          </div>\n          <div className=\"flex justify-end gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createPhotoMutation.isPending}\n              data-testid=\"button-submit-photo\"\n            >\n              {createPhotoMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n              Add Photo\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4192},"client/src/pages/people/index.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertPersonSchema, type InsertPerson, type Person } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Users, Plus, Search, Mail, Phone, MapPin, Loader2 } from \"lucide-react\";\nimport AppLayout from \"@/components/layout/app-layout\";\n\nexport default function PeopleIndex() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedType, setSelectedType] = useState<string>(\"all\");\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: people = [], isLoading } = useQuery<Person[]>({\n    queryKey: [\"/api/v1/people\"],\n  });\n\n  const createPersonMutation = useMutation({\n    mutationFn: async (data: InsertPerson) => {\n      const res = await apiRequest(\"POST\", \"/api/v1/people\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/v1/people\"] });\n      setDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Person created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create person\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<InsertPerson>({\n    resolver: zodResolver(insertPersonSchema.omit({ organizationId: true, flags: true })),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      type: \"adopter\",\n    },\n  });\n\n  const onSubmit = (data: InsertPerson) => {\n    createPersonMutation.mutate({ ...data, flags: data.flags || {} });\n  };\n\n  const filteredPeople = people.filter((person) => {\n    const matchesSearch = person.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      person.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      person.phone?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = selectedType === \"all\" || person.type === selectedType;\n    return matchesSearch && matchesType;\n  });\n\n  const peopleByType = {\n    all: filteredPeople,\n    adopter: filteredPeople.filter(p => p.type === \"adopter\"),\n    foster: filteredPeople.filter(p => p.type === \"foster\"),\n    volunteer: filteredPeople.filter(p => p.type === \"volunteer\"),\n    donor: filteredPeople.filter(p => p.type === \"donor\"),\n    staff: filteredPeople.filter(p => p.type === \"staff\"),\n  };\n\n  const renderPersonCard = (person: Person) => (\n    <Card key={person.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-person-${person.id}`}>\n      <CardContent className=\"pt-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-2 flex-1\">\n            <div>\n              <h3 className=\"font-semibold text-lg\" data-testid={`text-person-name-${person.id}`}>{person.name}</h3>\n              <p className=\"text-sm text-muted-foreground capitalize\">{person.type}</p>\n            </div>\n            {person.email && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\" data-testid={`text-person-email-${person.id}`}>\n                <Mail className=\"w-4 h-4\" />\n                <span>{person.email}</span>\n              </div>\n            )}\n            {person.phone && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\" data-testid={`text-person-phone-${person.id}`}>\n                <Phone className=\"w-4 h-4\" />\n                <span>{person.phone}</span>\n              </div>\n            )}\n            {person.address && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\" data-testid={`text-person-address-${person.id}`}>\n                <MapPin className=\"w-4 h-4\" />\n                <span>{person.address}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <AppLayout title=\"People\" subtitle=\"Manage adopters, fosters, volunteers, donors, and staff\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-end\">\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-person\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Person\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Add New Person</DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-person-name\" placeholder=\"John Doe\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Type *</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-person-type\">\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"adopter\">Adopter</SelectItem>\n                            <SelectItem value=\"foster\">Foster</SelectItem>\n                            <SelectItem value=\"volunteer\">Volunteer</SelectItem>\n                            <SelectItem value=\"donor\">Donor</SelectItem>\n                            <SelectItem value=\"staff\">Staff</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} type=\"email\" data-testid=\"input-person-email\" placeholder=\"john@example.com\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} data-testid=\"input-person-phone\" placeholder=\"(555) 555-5555\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Address</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} data-testid=\"input-person-address\" placeholder=\"123 Main St, City, State ZIP\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex justify-end gap-2\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      onClick={() => setDialogOpen(false)}\n                      data-testid=\"button-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button \n                      type=\"submit\" \n                      disabled={createPersonMutation.isPending}\n                      data-testid=\"button-submit-person\"\n                    >\n                      {createPersonMutation.isPending && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\n                      Create Person\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search by name, email, or phone...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-9\"\n              data-testid=\"input-search-people\"\n            />\n          </div>\n          <Select value={selectedType} onValueChange={setSelectedType}>\n            <SelectTrigger className=\"w-full sm:w-[200px]\" data-testid=\"select-filter-type\">\n              <SelectValue placeholder=\"Filter by type\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Types</SelectItem>\n              <SelectItem value=\"adopter\">Adopters</SelectItem>\n              <SelectItem value=\"foster\">Fosters</SelectItem>\n              <SelectItem value=\"volunteer\">Volunteers</SelectItem>\n              <SelectItem value=\"donor\">Donors</SelectItem>\n              <SelectItem value=\"staff\">Staff</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <Tabs defaultValue=\"all\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"all\" data-testid=\"tab-all\">\n              All ({peopleByType.all.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"adopter\" data-testid=\"tab-adopter\">\n              Adopters ({peopleByType.adopter.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"foster\" data-testid=\"tab-foster\">\n              Fosters ({peopleByType.foster.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"volunteer\" data-testid=\"tab-volunteer\">\n              Volunteers ({peopleByType.volunteer.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"donor\" data-testid=\"tab-donor\">\n              Donors ({peopleByType.donor.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"staff\" data-testid=\"tab-staff\">\n              Staff ({peopleByType.staff.length})\n            </TabsTrigger>\n          </TabsList>\n\n          {isLoading ? (\n            <div className=\"flex justify-center items-center py-12\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-muted-foreground\" />\n            </div>\n          ) : (\n            <>\n              <TabsContent value=\"all\" className=\"space-y-4\">\n                {peopleByType.all.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"py-12 text-center text-muted-foreground\">\n                      No people found. Add your first person to get started.\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {peopleByType.all.map(renderPersonCard)}\n                  </div>\n                )}\n              </TabsContent>\n              <TabsContent value=\"adopter\" className=\"space-y-4\">\n                {peopleByType.adopter.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"py-12 text-center text-muted-foreground\">\n                      No adopters found.\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {peopleByType.adopter.map(renderPersonCard)}\n                  </div>\n                )}\n              </TabsContent>\n              <TabsContent value=\"foster\" className=\"space-y-4\">\n                {peopleByType.foster.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"py-12 text-center text-muted-foreground\">\n                      No fosters found.\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {peopleByType.foster.map(renderPersonCard)}\n                  </div>\n                )}\n              </TabsContent>\n              <TabsContent value=\"volunteer\" className=\"space-y-4\">\n                {peopleByType.volunteer.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"py-12 text-center text-muted-foreground\">\n                      No volunteers found.\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {peopleByType.volunteer.map(renderPersonCard)}\n                  </div>\n                )}\n              </TabsContent>\n              <TabsContent value=\"donor\" className=\"space-y-4\">\n                {peopleByType.donor.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"py-12 text-center text-muted-foreground\">\n                      No donors found.\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {peopleByType.donor.map(renderPersonCard)}\n                  </div>\n                )}\n              </TabsContent>\n              <TabsContent value=\"staff\" className=\"space-y-4\">\n                {peopleByType.staff.length === 0 ? (\n                  <Card>\n                    <CardContent className=\"py-12 text-center text-muted-foreground\">\n                      No staff found.\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n                    {peopleByType.staff.map(renderPersonCard)}\n                  </div>\n                )}\n              </TabsContent>\n            </>\n          )}\n        </Tabs>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":15836},"replit.md":{"content":"# 4Paws - Animal Shelter Management System\n\n## Overview\n\n4Paws is a production-ready, multi-tenant web application designed for U.S. animal shelters and foster-based rescues. The system manages the complete lifecycle of animal care from intake through adoption, including medical scheduling, foster coordination, volunteer management, and reporting. Built with modern web technologies, it provides a fast, reliable platform with role-based access control and organization-level data isolation.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- **Framework:** React 18+ with TypeScript for type safety\n- **Routing:** Wouter for lightweight client-side routing\n- **State Management:** TanStack Query (React Query) for server state management and caching\n- **UI Components:** shadcn/ui built on Radix UI primitives with Tailwind CSS for styling\n- **Forms:** React Hook Form with Zod validation for type-safe form handling\n- **Design System:** Custom theme using orange/yellow/white brand colors defined in CSS variables\n\n**Component Organization:**\n- Page components in `client/src/pages/` organized by feature (dashboard, animals, medical, adoptions, etc.)\n- Reusable UI components in `client/src/components/ui/` following shadcn/ui patterns\n- Layout components (Sidebar, MobileNav, AppLayout) for consistent application structure\n- Custom business components (AnimalCard, MetricCard, EmptyState) for domain-specific UI\n\n**Build System:**\n- Vite for fast development and optimized production builds\n- Path aliases for clean imports (@/, @shared/, @assets/)\n- TypeScript configuration with strict mode enabled\n\n### Backend Architecture\n\n**Technology Stack:**\n- **Runtime:** Node.js with Express.js framework\n- **Database:** PostgreSQL with Drizzle ORM for type-safe database access\n- **Database Driver:** Neon serverless PostgreSQL driver with WebSocket support\n- **Authentication:** Session-based authentication using express-session with bcrypt password hashing\n- **Validation:** Zod schemas for request/response validation\n\n**API Design:**\n- RESTful API structure under `/api/v1/` namespace\n- Middleware-based authentication and authorization\n- Organization-scoped data access enforced at the database query level\n- Role-based access control (admin, staff, volunteer, foster, readonly)\n\n**Database Schema:**\n- Multi-tenant architecture with organizations table as the root\n- User memberships linking users to organizations with roles\n- Normalized schema with 20+ tables for animals, people, medical records, applications, adoptions, etc.\n- JSONB fields for extensible custom data\n- PostgreSQL enums for type-safe status fields\n\n**Session Management:**\n- HTTP-only cookies for security\n- Session data includes userId and organizationId for tenant isolation\n- Configurable session secret and expiration\n\n### Data Storage Solutions\n\n**Database:**\n- Primary data store: PostgreSQL (configured via Drizzle ORM)\n- Connection pooling via Neon serverless driver\n- Schema migrations managed through Drizzle Kit\n- Database URL configured via environment variable\n\n**File Storage:**\n- S3-compatible storage for animal photos and documents (configurable)\n- Local development fallback for file uploads\n- Photo URLs stored as text in database with subject-based organization\n\n**Session Store:**\n- In-memory session storage (development)\n- PostgreSQL-backed sessions via connect-pg-simple (production-ready)\n\n### Authentication and Authorization\n\n**Authentication Flow:**\n- Credential-based login with email/password\n- Password hashing using bcrypt (10 rounds)\n- Session-based authentication with HTTP-only cookies\n- Session middleware validates userId on protected routes\n\n**Authorization Model:**\n- Multi-tenant isolation: all queries scoped to organizationId from session\n- Role-based access control with five roles: admin, staff, volunteer, foster, readonly\n- Middleware functions (requireAuth, requireOrg) enforce access rules\n- Role-specific UI rendering and feature access\n\n**Security Measures:**\n- Passwords never stored in plain text\n- Session secrets configured via environment variables\n- HTTPS enforcement in production (secure cookies)\n- 24-hour session expiration\n\n### External Dependencies\n\n**Payment Processing:**\n- Stripe integration for adoption fees and donations\n- Stripe API version: 2025-09-30.clover\n- Public and secret keys configured via environment variables\n- Checkout flow integrated into adoption pipeline\n\n**Adoption Site Integration:**\n- XML feed generation for Petfinder and Adopt-a-Pet\n- Automated export of available animals with photos and details\n- Stubs for microchip registration services\n\n**Development Tools:**\n- Replit-specific plugins for development environment\n- Runtime error overlay for development debugging\n- Cartographer and dev banner for Replit integration\n\n**UI Component Libraries:**\n- Radix UI primitives for accessible components\n- Lucide React for consistent iconography\n- Tailwind CSS for utility-first styling\n- class-variance-authority for component variants\n\n**Database and ORM:**\n- Drizzle ORM with Neon serverless PostgreSQL driver\n- WebSocket support for real-time database connections\n- Drizzle Kit for schema migrations\n- Drizzle Zod for automatic schema validation\n\n**Additional Services:**\n- Future integration points: Shelter Animals Count export, additional microchip registries\n- CSV export functionality for reporting\n- QR code support for volunteer portal access","size_bytes":5525}},"version":1}