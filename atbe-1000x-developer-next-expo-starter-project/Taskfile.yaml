version: 3

# Import tasks from packages/api/Taskfile.yaml
includes:
  http-server: apps/http-server/Taskfile.yaml
  db-migrations: packages/db-migrations/Taskfile.yaml

dotenv: ['.env']

tasks:
  initialize-env-files:
    desc: "Copy .env files to the correct locations"
    cmds:
      - |
        if [ ! -f .env ]; then
          echo "Creating .env file"
          cp .env.example .env
        fi

        echo "Copying .env files to the correct locations"
        if [ ! -f utils/seed-data/.env ]; then
          echo "Creating .env file in utils/seed-data"
          cp utils/seed-data/.env.example utils/seed-data/.env
        fi

        if [ ! -f packages/db/.env ]; then
          echo "Creating .env file in packages/db"
          cp packages/db/.env.example packages/db/.env
        fi

        if [ ! -f apps/next-app/.env ]; then
          echo "Creating .env file in apps/next-app"
          cp apps/next-app/.env.example apps/next-app/.env
        fi

        if [ ! -f apps/http-server/.env ]; then
          echo "Creating .env file in apps/http-server"
          cp apps/http-server/.env.example apps/http-server/.env
        fi

        echo "Done copying .env files"

  install:all:
    desc: "Install all dependencies"
    cmds:
      - bun install

  lint:
    desc: "Lint TypeScript code in api, db, and tooling packages"
    cmds:
      - |
        echo "Linting all packages in parallel"
        cd apps/http-server && bun run lint & \
        cd packages/db && bun run lint & \
        cd packages/db-migrations && bun run lint & \
        cd packages/tooling && bun run lint & \
        cd apps/expo-app && bun run lint & \
        wait
      
  lint:fix:
    desc: "Lint and fix TypeScript code in api, db, and tooling packages"
    cmds:
      - |
        echo "Linting all packages in parallel"
        cd packages/api && bun run lint:fix & \
        cd packages/db && bun run lint:fix & \
        cd packages/db-migrations && bun run lint:fix & \
        cd packages/tooling && bun run lint:fix & \
        cd apps/expo-app && bun run lint:fix & \
        wait
  
  lint:fix:type-check:
    desc: "Lint and fix TypeScript code in all packages"
    cmds:
      - task: lint:fix
      - |
        echo "Type checking all packages in parallel"
        cd packages/api && bun run type-check & \
        cd packages/db && bun run type-check & \
        cd packages/db-migrations && bun run type-check & \
        cd packages/tooling && bun run type-check & \
        cd utils/seed-data && bun run type-check & \
        cd apps/expo-app && bun run type-check & \
        wait
  
  test:
    desc: "Run tests in all packages"
    cmds:
      - |
        echo "Running tests in all packages in parallel"
        cd packages/api && bun run test & \
        cd apps/http-server && bun run test & \
        cd packages/tooling && bun run test & \
        wait
      
  docker:start:
    desc: "Start docker containers"
    cmds:
      - docker compose up -d --wait

  docker:stop:
    desc: "Stop docker containers"
    cmds:
      - docker compose down

  docker:destroy:
    desc: "Destroy docker containers"
    cmds:
      - docker compose down -v

  docker:reset:
    desc: "Destroy and start docker containers, and apply migrations"
    cmds:
      - |
        echo "Installing dependencies"
        bun install
      - task: docker:destroy
      - task: docker:start
      - task: db-migrations:apply-migrations
      - task: seed

  start:
    desc: "Start the core services of the project, in parallel"
    cmds:
      - |
        echo "Installing dependencies"
        bun install

      - task: initialize-env-files

      - |
        echo "Applying migrations to the database"

      - task: db-migrations:apply-migrations

      - |
        bunx concurrently --restart-tries 99999999 --restart-after 1000 -n http-server,openapi,next-app,drizzle-studio \
         "cd apps/http-server && bun run dev" \
         "cd apps/http-server && bun run dev:openapi" \
         "cd apps/next-app && bun run dev" \
         "cd packages/db-migrations && bun run drizzle-kit studio --port 8082"

  seed:
    desc: "Seed the database with initial data"
    cmds:
      - cd utils/seed-data && bun run seed

  clean:node_modules:
    desc: "Clean node_modules"
    cmds:
      - |
        echo "Cleaning node_modules"
        find . -name "node_modules" -type d -exec rm -rf {} +

  gotrue:service-key:
    desc: Generate a local service_role JWT for GoTrue
    cmds:
      - |
        if [ -z "$GOTRUE_JWT_SECRET" ]; then
          echo "GOTRUE_JWT_SECRET is not set, set it in the .env file"
          exit 1
        fi
        header=$(printf '{"alg":"HS256","typ":"JWT"}' | openssl base64 -A | tr '+/' '-_' | tr -d '=')
        now=$(date +%s)
        payload=$(printf '{"role":"service_role","iss":"supabase","iat":%s,"exp":%s}' "$now" $((now+315360000)) \
                 | openssl base64 -A | tr '+/' '-_' | tr -d '=')
        sig=$(printf '%s.%s' "$header" "$payload" \
              | openssl dgst -sha256 -hmac "$GOTRUE_JWT_SECRET" -binary \
              | openssl base64 -A | tr '+/' '-_' | tr -d '=')
        echo -e "\n--- SERVICE ROLE JWT (10y) ---\n$header.$payload.$sig\n"


  run-stripe-webhook-locally:
    desc: "Run the stripe webhook locally"
    cmds:
      - |
        stripe listen --forward-to localhost:3042/stripe/webhook